{"version":3,"sources":["public/src/components/utils.ts","public/src/emiterClient.ts"],"names":["pixelFields","div","style","Object","keys","forEach","k","is_number","indexOf","type","styleOrClass","__style","__className","document","createElement","className","applyStyle","onData","blob","start","time","navigator","mediaDevices","getUserMedia","audio","then","stream","recorder","MediaRecorder","mimeType","ondataavailable","e","data","stop","form","FormData","append","Promise","socket","emit","constructor","lines","queue","utils_1","width","height","background","control","stopButton","innerHTML","onclick","disabled","rec","show","textAlign","margin","color","fontSize","textContainner","body","setInterval","appendWord","length","w","splice","id","result","push","io","on","console","log","Recorder","presenter","Presenter","sendBlob","text","roomKey","connect"],"mappings":"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","file":"","sourcesContent":["const pixelFields = [\"margin\", \"marginLeft\", \"marginRight\", \"marginTop\",\"marginBottom\", \r\n    \"padding\", \"paddingLeft\", \"paddingRight\", \"paddingTop\",\"paddingBottom\",\r\n    \"left\", \"top\", \"right\", \"bottom\",\"width\",\"height\", \"minWidth\", \"minHeight\", \r\n    \"maxWidth\", \"maxHeight\", \"borderWidth\"]\r\nexport function applyStyle(div: HTMLElement, style: any) {\r\n    Object.keys(style || {}).forEach(k => {\r\n        let is_number = pixelFields.indexOf(k) >= 0\r\n        if (is_number && typeof style[k] == \"number\") div.style[k] = style[k]+\"px\"\r\n        else div.style[k] = style[k]\r\n   \r\n    })\r\n}\r\n\r\n\r\ninterface  ICreateElement {\r\n    (type: \"button\", styleOrClass?: string | object, style?: object): HTMLButtonElement;\r\n    (type: \"div\", styleOrClass?: string | object, style?: object): HTMLDivElement;\r\n    (type: string, styleOrClass?: string | object, style?: object): HTMLElement;\r\n}\r\nexport const createElement: ICreateElement = (type: string, styleOrClass?: string | object, style?: object) => {\r\n    var __style = typeof styleOrClass == \"object\"? styleOrClass : style || {}\r\n    var __className = typeof styleOrClass == \"string\"? styleOrClass : \"\"\r\n    var div = document.createElement(type)\r\n    div.className = __className\r\n    applyStyle(div, __style)\r\n    return div as any\r\n} \r\n\r\nexport function createDiv(styleOrClass?: string | object, style?: object) {\r\n    var __style = typeof styleOrClass == \"object\"? styleOrClass : style || {}\r\n    var __className = typeof styleOrClass == \"string\"? styleOrClass : \"\"\r\n    var div = document.createElement(\"div\")\r\n    div.className = __className\r\n    applyStyle(div, __style)\r\n    return div\r\n}\r\n","import { createDiv, createElement } from \"./components/utils\"\r\n\r\ndeclare const io : typeof import(\"socket.io-client\").default\r\nclass Recorder {\r\n    onData = (blob: Blob) => null\r\n    recorder: MediaRecorder\r\n    start(time = 3000) {\r\n        navigator.mediaDevices.getUserMedia({audio: true}).then(stream => {\r\n            var recorder = new MediaRecorder(stream, {mimeType: 'audio/webm;codecs=opus'})\r\n            recorder.ondataavailable = (e) => {                \r\n                this.onData(e.data)\r\n            }\r\n            this.recorder = recorder\r\n            recorder.start(time)\r\n        })\r\n    }\r\n    stop() {\r\n        this.recorder.stop()\r\n    }\r\n}\r\n/*\r\nfunction Ui(recorder: Recorder) {\r\n    var div = document.createElement(\"div\")\r\n    var button = document.createElement(\"button\")\r\n    button.innerHTML = \"Stop\"\r\n    button.onclick = () => recorder.stop()\r\n    div.append(button)\r\n    var textarea = document.createElement(\"div\")\r\n    div.append(textarea)\r\n    document.body.appendChild(div)\r\n    function append(text: string) {\r\n        textarea.innerHTML += \" \"+text\r\n    }\r\n    return {append}\r\n}\r\n*/\r\nfunction sendBlob(blob: Blob): Promise<string> {\r\n    var form = new FormData()\r\n    form.append(\"blob\", blob)\r\n    return new Promise(() => {\r\n        socket.emit(\"blob\", blob)\r\n    })\r\n}\r\n\r\n\r\nclass Presenter {\r\n    textContainner: HTMLDivElement;\r\n    control: HTMLDivElement;\r\n    lines: {[id: string]: HTMLDivElement} = {}\r\n    queue: {result: string, id: string}[] = []\r\n    constructor() {\r\n        var div = createDiv({width: \"100%\", height: \"100%\", background: \"#111111\"})\r\n\r\n        this.control = createDiv()\r\n        var stopButton = createElement(\"button\")\r\n        stopButton.innerHTML = \"STOP\"\r\n        stopButton.onclick = () => {\r\n            stopButton.disabled = true\r\n            rec.stop()\r\n        }\r\n        this.control.append(stopButton)\r\n        div.append(this.control)\r\n\r\n\r\n        var show = createDiv({width: 350, textAlign: \"center\", margin: \"auto auto\", color: \"#ffffff\", fontSize: 20})\r\n        this.textContainner = show\r\n        div.append(show)\r\n\r\n        document.body.append(div)\r\n        setInterval(() => {\r\n            this.appendWord()\r\n        }, 100)\r\n    }\r\n    appendWord() {    \r\n        if (this.queue.length) {\r\n            var w = this.queue.splice(0, 1)[0]\r\n            if (!this.lines[w.id]) {\r\n                var div = createDiv()\r\n                this.textContainner.append(div)\r\n                this.lines[w.id] = div;\r\n            }\r\n            this.lines[w.id].innerHTML = w.result\r\n\r\n        }\r\n    }\r\n\r\n    append(data: {result: string, id: string}) {\r\n        this.queue.push(data)\r\n   \r\n    }\r\n}\r\n\r\n\r\n\r\nvar socket = io()\r\n\r\nvar rec: Recorder \r\nsocket.on(\"ready\", () => {\r\n    console.log(\"Starting recorder\")\r\n    if (rec) {\r\n        rec.stop()\r\n        rec = new Recorder()\r\n    } else {\r\n        rec = new Recorder()\r\n    }\r\n\r\n    var presenter = new Presenter()\r\n    rec.onData = blob => {\r\n        sendBlob(blob).then(text => {\r\n            //ui.append(text)\r\n        })    \r\n    }\r\n    rec.start()\r\n\r\n    socket.on(\"mensaje\", data => {\r\n        //ui.append(data.result)\r\n        presenter.append(data)\r\n    })\r\n    //var ui = Ui(rec)\r\n})\r\nsocket.on(\"disconnect\", () => {\r\n    console.log(\"disconected\")\r\n    if (rec) {\r\n        rec.stop()\r\n        rec = null\r\n    }\r\n})\r\nsocket.on(\"connect\", () => {\r\n    console.log(\"connected\")\r\n})\r\nsocket.on(\"hello\", () => {\r\n    socket.emit(\"broadcast\", {roomKey: \"1JY76G7\"})\r\n  \r\n})\r\nsocket.connect()"]}