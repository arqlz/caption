{"version":3,"sources":["public/src/components/utils.ts","public/src/presenter.ts","public/src/emiterClient.ts"],"names":["pixelFields","div","style","Object","keys","forEach","k","is_number","indexOf","type","styleOrClass","__style","__className","document","createElement","className","applyStyle","constructor","rec","roomKey","mensajes","queue","raw","stoped","listennerMode","elements","__title","utils_1","width","height","id","header","append","title","margin","innerHTML","roomData","roomId","svg","paddingLeft","classList","add","src","onclick","documentElement","requestFullscreen","timeCounter","fontSize","fontWeight","control","stopButton","remove","console","log","stop","irAlEditor","location","href","transmissionContainner","maxHeight","color","display","flexDirection","overflow","scrollBehavior","body","value","timeElapsed","toString","render","length","mensaje","splice","marginRight","result","scrollTo","top","scrollHeight","data","push","resume","isAvailable","onData","blob","startTime","listenners","start","time","navigator","mediaDevices","getUserMedia","audio","then","stream","recorder","MediaRecorder","mimeType","Date","now","ondataavailable","e","cb","onStop","form","FormData","Promise","socket","emit","io","presenter","once","sendBlob","on","interval","setInterval","clearInterval","error","roomkey","pathname","Error","split","slice","Recorder","presenter_1","info","eventTitle","language","connect"],"mappings":"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","file":"","sourcesContent":["const pixelFields = [\"margin\", \"marginLeft\", \"marginRight\", \"marginTop\",\"marginBottom\", \r\n    \"padding\", \"paddingLeft\", \"paddingRight\", \"paddingTop\",\"paddingBottom\",\r\n    \"left\", \"top\", \"right\", \"bottom\",\"width\",\"height\", \"minWidth\", \"minHeight\", \r\n    \"maxWidth\", \"maxHeight\", \"borderWidth\"]\r\nexport function applyStyle(div: HTMLElement, style: any) {\r\n    Object.keys(style || {}).forEach(k => {\r\n        let is_number = pixelFields.indexOf(k) >= 0\r\n        if (is_number && typeof style[k] == \"number\") div.style[k] = style[k]+\"px\"\r\n        else div.style[k] = style[k]\r\n   \r\n    })\r\n}\r\n\r\n\r\ninterface  ICreateElement {\r\n    (type: \"button\", styleOrClass?: string | object, style?: object): HTMLButtonElement;\r\n    (type: \"div\", styleOrClass?: string | object, style?: object): HTMLDivElement;\r\n    (type: string, styleOrClass?: string | object, style?: object): HTMLElement;\r\n}\r\nexport const createElement: ICreateElement = (type: string, styleOrClass?: string | object, style?: object) => {\r\n    var __style = typeof styleOrClass == \"object\"? styleOrClass : style || {}\r\n    var __className = typeof styleOrClass == \"string\"? styleOrClass : \"\"\r\n    var div = document.createElement(type)\r\n    div.className = __className\r\n    applyStyle(div, __style)\r\n    return div as any\r\n} \r\n\r\nexport function createDiv(styleOrClass?: string | object, style?: object) {\r\n    var __style = typeof styleOrClass == \"object\"? styleOrClass : style || {}\r\n    var __className = typeof styleOrClass == \"string\"? styleOrClass : \"\"\r\n    var div = document.createElement(\"div\")\r\n    div.className = __className\r\n    applyStyle(div, __style)\r\n    return div\r\n}\r\n","import { createDiv, createElement } from \"./components/utils\"\r\ndeclare const roomId: string;\r\n\r\nexport class Presenter {\r\n    transmissionContainner: HTMLDivElement;\r\n    control: HTMLDivElement;\r\n    mensajes: {[id: string]: HTMLDivElement} = {}\r\n    queue: {result: string, id: string}[] = []\r\n    raw: string = \"\"\r\n    stoped: boolean = false;\r\n    listennerMode: boolean = true;\r\n\r\n    elements: {title?: HTMLElement, roomData?: HTMLElement, timeCounter?: HTMLElement} = {}\r\n\r\n    private __title = \"\";\r\n    constructor( rec?, roomKey?: string) {\r\n        var div = createDiv({width: \"100%\", height: \"100%\"})\r\n        div.className=\"msgContainner\";\r\n        div.id = \"core\"\r\n\r\n        var header = createDiv(\"header\")\r\n        div.append(header)\r\n\r\n        let title = createElement(\"h2\", {margin: \"15px 0\"})\r\n        title.innerHTML = ``;       \r\n        header.append(title)\r\n        this.elements.title = title;\r\n\r\n        let roomData = createDiv({margin: \"15px 0\"})\r\n        roomData.innerHTML = `Id de la sala: ${roomId}`;  \r\n        let svg = createElement(\"img\",  {paddingLeft: 10}) as HTMLImageElement;\r\n        svg.classList.add(\"fullscreen\")\r\n        svg.src = \"/images/fullscreen.svg\";\r\n        svg.onclick = () => {\r\n            document.documentElement.requestFullscreen()\r\n        }\r\n        roomData.append(svg)     \r\n        header.append(roomData)\r\n        this.elements.roomData = roomData;\r\n\r\n        let timeCounter = createDiv({margin: \"15px 0\", fontSize: 30, fontWeight: 600})\r\n        timeCounter.innerHTML = ``;       \r\n        header.append(timeCounter)\r\n        this.elements.timeCounter = timeCounter;\r\n\r\n\r\n        if (rec) this.listennerMode = false;\r\n\r\n        this.control = createDiv(\"navigation\")\r\n        var stopButton = createElement(\"button\")\r\n        stopButton.innerHTML = \"STOP\"\r\n        stopButton.onclick = () => {\r\n            if (this.stoped && this.listennerMode) {\r\n                stopButton.classList.remove(\"disabled\")\r\n                stopButton.innerHTML = \"STOP\"\r\n                this.stoped = false;\r\n            } else {\r\n                stopButton.classList.add(\"disabled\")\r\n                stopButton.innerHTML = \"RESTART\"\r\n                this.stoped = true;\r\n            }\r\n           \r\n            if(rec) {\r\n                console.log(\"STOP RECORDER\", rec);\r\n                rec.stop();\r\n\r\n                var irAlEditor = createElement(\"button\");\r\n                irAlEditor.innerHTML = \"Ir al editor\";\r\n                irAlEditor.onclick = () => {\r\n                    location.href = `/editor/${roomKey}`;\r\n                }\r\n                this.control.append(irAlEditor);\r\n            }\r\n        }\r\n        this.control.append(stopButton)\r\n\r\n        \r\n\r\n\r\n        div.append(this.control)\r\n\r\n        this.transmissionContainner = createDiv(\"transcripciones\", {width: 400, maxHeight: 200,  margin: \"auto auto\", color: \"#ffffff\", fontSize: 20, \r\n        display: \"flex\", flexDirection: \"column\", overflow: \"hidden\"})\r\n        this.transmissionContainner.style.scrollBehavior = \"smooth\";\r\n        div.append(this.transmissionContainner)\r\n\r\n        document.body.append(div)\r\n    }\r\n\r\n    set title(value: string) {\r\n        this.__title = value;\r\n        this.elements.title.innerHTML = value;\r\n    }\r\n    set timeElapsed(value: number) {\r\n        this.elements.timeCounter.innerHTML = (value / 1000 | 0).toString();\r\n    }\r\n\r\n    private render() {\r\n        if (this.listennerMode == true && this.stoped) return;\r\n        while(this.queue.length) {\r\n            var mensaje = this.queue.splice(0, 1)[0];\r\n            if (!this.mensajes[mensaje.id]) {\r\n                var div = createDiv(\"textRow\",{ marginRight: \"4pt\"});\r\n                this.transmissionContainner.append(div);\r\n                this.mensajes[mensaje.id] = div;\r\n                this.mensajes[mensaje.id].innerHTML = mensaje.result;\r\n                this.transmissionContainner.scrollTo({top: this.transmissionContainner.scrollHeight})\r\n            } else {\r\n                this.mensajes[mensaje.id].innerHTML = mensaje.result;\r\n                this.transmissionContainner.scrollTo({top: this.transmissionContainner.scrollHeight})\r\n            }\r\n        }\r\n     \r\n    }\r\n    append(data: {result: string, id: string}) {\r\n        this.queue.push(data)   \r\n        this.render();  \r\n    }\r\n    stop() {\r\n        this.stoped = true;\r\n    }\r\n    resume() {\r\n        this.stoped = false;\r\n        this.render();\r\n    }\r\n}\r\n","import { Presenter } from \"./presenter\"\r\ndeclare const io : typeof import(\"socket.io-client\").default\r\nclass Recorder {\r\n    private isAvailable = false\r\n    onData = (blob: Blob) => null\r\n    recorder: MediaRecorder\r\n    startTime = 0;\r\n    start(time = 4000) {\r\n        navigator.mediaDevices.getUserMedia({audio: true}).then(stream => {\r\n            var recorder = new MediaRecorder(stream, {mimeType: 'audio/webm;codecs=opus'})\r\n            this.startTime = Date.now();\r\n            recorder.ondataavailable = (e) => {                \r\n                this.onData(e.data)\r\n            }\r\n            this.recorder = recorder\r\n            recorder.start(time)\r\n            this.isAvailable = true;     \r\n        })\r\n    }\r\n    stop() {\r\n        if (this.isAvailable) {\r\n            this.isAvailable = false;\r\n            this.recorder.stop()\r\n            for (let cb of this.listenners) cb()\r\n        }  \r\n    }\r\n    private listenners = [];\r\n    onStop(cb) {\r\n        this.listenners.push(cb)\r\n    }\r\n}\r\n\r\nfunction sendBlob(blob: Blob): Promise<string> {\r\n    var form = new FormData()\r\n    form.append(\"blob\", blob)\r\n    return new Promise(() => {\r\n        socket.emit(\"blob\", blob)\r\n    })\r\n}\r\n\r\nvar socket = io()\r\n\r\nvar rec: Recorder \r\nvar presenter : Presenter\r\nsocket.once(\"ready\", () => {\r\n    console.log(\"Starting recorder\")\r\n\r\n    rec.onData = blob => {\r\n        sendBlob(blob)   \r\n    }\r\n    rec.start()\r\n\r\n    socket.on(\"mensaje\", data => {\r\n        presenter.append(data)\r\n    })\r\n    var interval = setInterval(() => {\r\n        presenter.timeElapsed =  Date.now() - rec.startTime  \r\n    }, 200)\r\n\r\n    rec.onStop(() => {\r\n        clearInterval(interval);\r\n    })\r\n\r\n})\r\n\r\nsocket.on(\"disconnect\", () => {\r\n    if (rec) {\r\n        rec.stop()\r\n        rec = null\r\n    }\r\n})\r\nsocket.on(\"error\", (data) => {\r\n    console.error(data)\r\n})\r\nsocket.on(\"connect\", () => {    \r\n    var roomkey = location.pathname || \"\"\r\n    if (roomkey.length < 2) throw new Error(\"sala invalida\")\r\n    roomkey = roomkey.split(\"/\").slice(2)[0];\r\n\r\n    if (rec) {\r\n        rec.stop()\r\n    } \r\n    rec = new Recorder()\r\n    presenter = new Presenter(rec, roomkey)\r\n    socket.on(\"info\", (info: {photoUrl: string, eventTitle: string}) => {\r\n        presenter.title = info.eventTitle;\r\n        console.log(\"on info\", info)\r\n    })\r\n\r\n    socket.emit(\"broadcast\", {roomKey: roomkey, language: \"es-DO\"}); \r\n    \r\n    \r\n})\r\nsocket.connect()"]}