{"version":3,"sources":["public/src/emiterClient.ts","public/src/components/utils.ts","public/src/presenter.ts"],"names":["isAvailable","onData","blob","start","time","navigator","mediaDevices","getUserMedia","audio","then","stream","recorder","MediaRecorder","mimeType","ondataavailable","e","data","stop","form","FormData","append","Promise","socket","emit","io","rec","once","console","log","Recorder","presenter","presenter_1","sendBlob","on","roomkey","location","pathname","length","Error","split","slice","roomKey","roomId","connect","pixelFields","div","style","Object","keys","forEach","k","is_number","indexOf","type","styleOrClass","__style","__className","document","createElement","className","applyStyle","constructor","lines","queue","utils_1","width","height","control","stopButton","innerHTML","onclick","disabled","show","textAlign","margin","color","fontSize","textContainner","body","setInterval","appendWord","w","splice","id","result","push"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;SACYA,cAAc;SACtBC,SAAS,AAACC,QAAe;;EAEzBC,MAAMC,OAAO;IACTC,UAAUC,aAAaC;MAAcC,OAAO;OAAOC,KAAKC,AAAA;UAChDC,eAAeC,cAAcF;QAASG,UAAU;;MACpDF,SAASG,kBAAkB,AAACC;QACxB,KAAKd,OAAOc,EAAEC;;MAElB,KAAKL,WAAWA;MAChBA,SAASR,MAAMC;MACf,KAAKJ,cAAc;;;EAG3BiB;QACQ,KAAKjB;MACL,KAAKA,cAAc;MACnB,KAAKW,SAASM;;;;AAK1B,kBAAkBf;MACVgB,WAAWC;EACfD,KAAKE,OAAO,QAAQlB;aACTmB,QAAQ;IACfC,OAAOC,KAAK,QAAQrB;;;IAIxBoB,SAASE;IAETC;AACJH,OAAOI,KAAK,SAAS;EACjBC,QAAQC,IAAI;MACRH;IACAA,IAAIR;IACJQ,UAAUI;;IAEVJ,UAAUI;;MAGVC,gBAAgBC,sBAAUN;EAC9BA,IAAIxB,SAASC,AAAA;IACT8B,SAAS9B;;EAEbuB,IAAItB;EAEJmB,OAAOW,GAAG,WAAWjB,AAAA;IACjBc,UAAUV,OAAOJ;;;AAGzBM,OAAOW,GAAG,cAAc;EACpBN,QAAQC,IAAI;MACRH;IACAA,IAAIR;IACJQ,MAAM;;;AAGdH,OAAOW,GAAG,WAAW;EACjBN,QAAQC,IAAI;;AAEhBN,OAAOW,GAAG,SAAS;MACXC,UAAUC,SAASC,YAAY;MAC/BF,QAAQG,SAAS;cACPC,MAAM;;;EAGpBJ,UAAUA,QAAQK,MAAM,KAAKC,MAAM,GAAG;EACtClB,OAAOC,KAAK;IAAckB,SAASP;;;AAEvCZ,OAAOW,GAAG,UAAW,AAACS;EAClBf,QAAQC,IAAI;;AAEhBN,OAAOqB;;;;;;;MC7EDC,eAAe,UAAU,cAAc,eAAe,aAAY,gBACpE,WAAW,eAAe,gBAAgB,cAAa,iBACvD,QAAQ,OAAO,SAAS,UAAS,SAAQ,UAAU,YAAY,aAC/D,YAAY,aAAa;AACtB,oBAAoBC,KAAkBC;EACzCC,OAAOC,KAAKF,eAAaG,QAAQC,AAAA;QACzBC,YAAYP,YAAYQ,QAAQF,MAAM;QACtCC,oBAAoBL,MAAMI,MAAM,UAAUL,IAAIC,MAAMI,KAAKJ,MAAMI,KAAG,WACjEL,IAAIC,MAAMI,KAAKJ,MAAMI;;;;wBAWW,CAACG,MAAcC,cAAgCR;MACpFS,iBAAiBD,gBAAgB,WAAUA,eAAeR;MAC1DU,qBAAqBF,gBAAgB,WAAUA,eAAe;MAC9DT,MAAMY,SAASC,cAAcL;EACjCR,IAAIc,YAAYH;EAChBI,WAAWf,KAAKU;SACTV;;AAGJ,mBAAmBS,cAAgCR;MAClDS,iBAAiBD,gBAAgB,WAAUA,eAAeR;MAC1DU,qBAAqBF,gBAAgB,WAAUA,eAAe;MAC9DT,MAAMY,SAASC,cAAc;EACjCb,IAAIc,YAAYH;EAChBI,WAAWf,KAAKU;SACTV;;;;;;;;;;AChCJ;EAKHgB,YAAYpC;SAFZqC;SACAC;QAEQlB,MAAMmB;MAAWC,OAAO;MAAQC,QAAQ;;IAE5C,KAAKC,UAAUH;QACXI,aAAaJ,sBAAc;IAC/BI,WAAWC,YAAY;IACvBD,WAAWE,UAAU;MACjBF,WAAWG,WAAW;UACnB9C;QACCE,QAAQC,IAAI,iBAAiBH;QAC7BA,IAAIR;;;IAGZ,KAAKkD,QAAQ/C,OAAOgD;IACpBvB,IAAIzB,OAAO,KAAK+C;QAEZK,OAAOR;MAAWC,OAAO;MAAKQ,WAAW;MAAUC,QAAQ;MAAaC,OAAO;MAAWC,UAAU;;IACxG,KAAKC,iBAAiBL;IACtB3B,IAAIzB,OAAOoD;IAEXf,SAASqB,KAAK1D,OAAOyB;IACrBkC,YAAY;MACR,KAAKC;OACN;;EAEPA;QACQ,KAAKjB,MAAM1B;UACP4C,IAAI,KAAKlB,MAAMmB,OAAO,GAAG,GAAG;WAC3B,KAAKpB,MAAMmB,EAAEE;YACVtC,MAAMmB;QACV,KAAKa,eAAezD,OAAOyB;QAC3B,KAAKiB,MAAMmB,EAAEE,MAAMtC;;MAEvB,KAAKiB,MAAMmB,EAAEE,IAAId,YAAYY,EAAEG;;;EAGvChE,OAAOJ;IACH,KAAK+C,MAAMsB,KAAKrE","file":"","sourcesContent":["import { Presenter } from \"./presenter\"\r\ndeclare const io : typeof import(\"socket.io-client\").default\r\nclass Recorder {\r\n    private isAvailable = false\r\n    onData = (blob: Blob) => null\r\n    recorder: MediaRecorder\r\n    start(time = 3000) {\r\n        navigator.mediaDevices.getUserMedia({audio: true}).then(stream => {\r\n            var recorder = new MediaRecorder(stream, {mimeType: 'audio/webm;codecs=opus'})\r\n            recorder.ondataavailable = (e) => {                \r\n                this.onData(e.data)\r\n            }\r\n            this.recorder = recorder\r\n            recorder.start(time)\r\n            this.isAvailable = true;\r\n        })\r\n    }\r\n    stop() {\r\n        if (this.isAvailable) {\r\n            this.isAvailable = false;\r\n            this.recorder.stop()\r\n        }  \r\n    }\r\n}\r\n\r\nfunction sendBlob(blob: Blob): Promise<string> {\r\n    var form = new FormData()\r\n    form.append(\"blob\", blob)\r\n    return new Promise(() => {\r\n        socket.emit(\"blob\", blob)\r\n    })\r\n}\r\n\r\nvar socket = io()\r\n\r\nvar rec: Recorder \r\nsocket.once(\"ready\", () => {\r\n    console.log(\"Starting recorder\")\r\n    if (rec) {\r\n        rec.stop()\r\n        rec = new Recorder()\r\n    } else {\r\n        rec = new Recorder()\r\n    }\r\n\r\n    var presenter = new Presenter(rec)\r\n    rec.onData = blob => {\r\n        sendBlob(blob)   \r\n    }\r\n    rec.start()\r\n\r\n    socket.on(\"mensaje\", data => {\r\n        presenter.append(data)\r\n    })\r\n})\r\nsocket.on(\"disconnect\", () => {\r\n    console.log(\"disconected\")\r\n    if (rec) {\r\n        rec.stop()\r\n        rec = null\r\n    }\r\n})\r\nsocket.on(\"connect\", () => {\r\n    console.log(\"connected\")\r\n})\r\nsocket.on(\"hello\", () => {\r\n    var roomkey = location.pathname || \"\"\r\n    if (roomkey.length < 2) {\r\n        throw new Error(\"sala invalida\")\r\n        return\r\n    }\r\n    roomkey = roomkey.split(\"/\").slice(2)[0];\r\n    socket.emit(\"broadcast\", {roomKey: roomkey});  \r\n})\r\nsocket.on(\"joined\",  (roomId) => {\r\n    console.log(\"Joined to room\")\r\n});  \r\nsocket.connect()","const pixelFields = [\"margin\", \"marginLeft\", \"marginRight\", \"marginTop\",\"marginBottom\", \r\n    \"padding\", \"paddingLeft\", \"paddingRight\", \"paddingTop\",\"paddingBottom\",\r\n    \"left\", \"top\", \"right\", \"bottom\",\"width\",\"height\", \"minWidth\", \"minHeight\", \r\n    \"maxWidth\", \"maxHeight\", \"borderWidth\"]\r\nexport function applyStyle(div: HTMLElement, style: any) {\r\n    Object.keys(style || {}).forEach(k => {\r\n        let is_number = pixelFields.indexOf(k) >= 0\r\n        if (is_number && typeof style[k] == \"number\") div.style[k] = style[k]+\"px\"\r\n        else div.style[k] = style[k]\r\n   \r\n    })\r\n}\r\n\r\n\r\ninterface  ICreateElement {\r\n    (type: \"button\", styleOrClass?: string | object, style?: object): HTMLButtonElement;\r\n    (type: \"div\", styleOrClass?: string | object, style?: object): HTMLDivElement;\r\n    (type: string, styleOrClass?: string | object, style?: object): HTMLElement;\r\n}\r\nexport const createElement: ICreateElement = (type: string, styleOrClass?: string | object, style?: object) => {\r\n    var __style = typeof styleOrClass == \"object\"? styleOrClass : style || {}\r\n    var __className = typeof styleOrClass == \"string\"? styleOrClass : \"\"\r\n    var div = document.createElement(type)\r\n    div.className = __className\r\n    applyStyle(div, __style)\r\n    return div as any\r\n} \r\n\r\nexport function createDiv(styleOrClass?: string | object, style?: object) {\r\n    var __style = typeof styleOrClass == \"object\"? styleOrClass : style || {}\r\n    var __className = typeof styleOrClass == \"string\"? styleOrClass : \"\"\r\n    var div = document.createElement(\"div\")\r\n    div.className = __className\r\n    applyStyle(div, __style)\r\n    return div\r\n}\r\n","import { createDiv, createElement } from \"./components/utils\"\r\n\r\nexport class Presenter {\r\n    textContainner: HTMLDivElement;\r\n    control: HTMLDivElement;\r\n    lines: {[id: string]: HTMLDivElement} = {}\r\n    queue: {result: string, id: string}[] = []\r\n    constructor(rec?) {\r\n        var div = createDiv({width: \"100%\", height: \"100%\"})\r\n\r\n        this.control = createDiv()\r\n        var stopButton = createElement(\"button\")\r\n        stopButton.innerHTML = \"STOP\"\r\n        stopButton.onclick = () => {\r\n            stopButton.disabled = true\r\n            if(rec) {\r\n                console.log(\"STOP RECORDER\", rec)\r\n                rec.stop()\r\n            }\r\n        }\r\n        this.control.append(stopButton)\r\n        div.append(this.control)\r\n\r\n        var show = createDiv({width: 350, textAlign: \"center\", margin: \"auto auto\", color: \"#ffffff\", fontSize: 20})\r\n        this.textContainner = show\r\n        div.append(show)\r\n\r\n        document.body.append(div)\r\n        setInterval(() => {\r\n            this.appendWord()\r\n        }, 100)\r\n    }\r\n    appendWord() {    \r\n        if (this.queue.length) {\r\n            var w = this.queue.splice(0, 1)[0]\r\n            if (!this.lines[w.id]) {\r\n                var div = createDiv()\r\n                this.textContainner.append(div)\r\n                this.lines[w.id] = div;\r\n            }\r\n            this.lines[w.id].innerHTML = w.result\r\n        }\r\n    }\r\n    append(data: {result: string, id: string}) {\r\n        this.queue.push(data)\r\n   \r\n    }\r\n}\r\n"]}