{"contents":"exports.__esModule = true;\nvar presenter_1 = __fusereq(2);\nvar presenter = new presenter_1.Presenter();\nvar socket = io();\nsocket.on(\"disconnect\", () => {\n  console.log(\"disconected\");\n});\nsocket.on(\"connect\", () => {\n  console.log(\"connected\");\n});\nsocket.on(\"hello\", () => {\n  var roomId = location.pathname || \"\";\n  if (roomId.length < 2) {\n    throw new Error(\"sala invalida\");\n    return;\n  }\n  roomId = roomId.split(\"/\").slice(2)[0];\n  socket.emit(\"join\", {\n    roomId: roomId\n  });\n});\nsocket.on(\"joined\", roomId => {\n  socket.on(\"mensaje\", data => {\n    console.log(data.result);\n    presenter.append(data);\n  });\n  console.log(\"Joined to room\");\n  socket.emit(\"test\");\n});\nsocket.connect();\n","sourceMap":"{\"version\":3,\"sources\":[\"public/src/receptorClient.ts\"],\"names\":[\"presenter\",\"presenter_1\",\"socket\",\"io\",\"on\",\"console\",\"log\",\"roomId\",\"location\",\"pathname\",\"length\",\"Error\",\"split\",\"slice\",\"emit\",\"data\",\"result\",\"append\",\"connect\"],\"mappings\":\";;IAEIA,gBAAgBC;IAGhBC,SAASC;AAGbD,OAAOE,GAAG,cAAc;EACpBC,QAAQC,IAAI;;AAEhBJ,OAAOE,GAAG,WAAW;EACjBC,QAAQC,IAAI;;AAEhBJ,OAAOE,GAAG,SAAS;MACXG,SAASC,SAASC,YAAY;MAC9BF,OAAOG,SAAS;cACNC,MAAM;;;EAGpBJ,SAASA,OAAOK,MAAM,KAAKC,MAAM,GAAG;EACpCX,OAAOY,KAAK;IAASP,QAAQA;;;AAIjCL,OAAOE,GAAG,UAAW,AAACG;EAClBL,OAAOE,GAAG,WAAW,AAAAW;IACjBV,QAAQC,IAAIS,KAAKC;IACjBhB,UAAUiB,OAAOF;;EAGrBV,QAAQC,IAAI;EACZJ,OAAOY,KAAK;;AAGhBZ,OAAOgB\",\"sourcesContent\":[\"import { Presenter } from \\\"./presenter\\\";\\r\\ndeclare const io : typeof import(\\\"socket.io-client\\\").default\\r\\nvar presenter = new Presenter()\\r\\n\\r\\n\\r\\nvar socket = io()\\r\\n\\r\\n\\r\\nsocket.on(\\\"disconnect\\\", () => {\\r\\n    console.log(\\\"disconected\\\")\\r\\n})\\r\\nsocket.on(\\\"connect\\\", () => {\\r\\n    console.log(\\\"connected\\\")\\r\\n})\\r\\nsocket.on(\\\"hello\\\", () => {\\r\\n    var roomId = location.pathname || \\\"\\\"\\r\\n    if (roomId.length < 2) {\\r\\n        throw new Error(\\\"sala invalida\\\")\\r\\n        return\\r\\n    }\\r\\n    roomId = roomId.split(\\\"/\\\").slice(2)[0];\\r\\n    socket.emit(\\\"join\\\", {roomId: roomId});  \\r\\n\\r\\n\\r\\n})\\r\\nsocket.on(\\\"joined\\\",  (roomId) => {\\r\\n    socket.on(\\\"mensaje\\\", data => {\\r\\n        console.log(data.result)\\r\\n        presenter.append(data)\\r\\n    })\\r\\n\\r\\n    console.log(\\\"Joined to room\\\")\\r\\n    socket.emit(\\\"test\\\")\\r\\n});  \\r\\n\\r\\nsocket.connect()\"]}"}