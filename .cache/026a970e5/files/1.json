{"contents":"exports.__esModule = true;\nvar utils_1 = __fusereq(2);\nclass Recorder {\n  constructor() {\n    this.onData = blob => null;\n  }\n  start(time = 3000) {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      var recorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n      recorder.ondataavailable = e => {\n        this.onData(e.data);\n      };\n      this.recorder = recorder;\n      recorder.start(time);\n    });\n  }\n  stop() {\n    this.recorder.stop();\n  }\n}\nfunction sendBlob(blob) {\n  var form = new FormData();\n  form.append(\"blob\", blob);\n  return new Promise(() => {\n    socket.emit(\"blob\", blob);\n  });\n}\nclass Presenter {\n  constructor() {\n    this.lines = {};\n    this.queue = [];\n    var div = utils_1.createDiv({\n      width: \"100%\",\n      height: \"100%\",\n      background: \"#111111\"\n    });\n    this.control = utils_1.createDiv();\n    var stopButton = utils_1.createElement(\"button\");\n    stopButton.innerHTML = \"STOP\";\n    stopButton.onclick = () => {\n      stopButton.disabled = true;\n      rec.stop();\n    };\n    this.control.append(stopButton);\n    div.append(this.control);\n    var show = utils_1.createDiv({\n      width: 350,\n      textAlign: \"center\",\n      margin: \"auto auto\",\n      color: \"#ffffff\",\n      fontSize: 20\n    });\n    this.textContainner = show;\n    div.append(show);\n    document.body.append(div);\n    setInterval(() => {\n      this.appendWord();\n    }, 100);\n  }\n  appendWord() {\n    if (this.queue.length) {\n      var w = this.queue.splice(0, 1)[0];\n      if (!this.lines[w.id]) {\n        var div = utils_1.createDiv();\n        this.textContainner.append(div);\n        this.lines[w.id] = div;\n      }\n      this.lines[w.id].innerHTML = w.result;\n    }\n  }\n  append(data) {\n    this.queue.push(data);\n  }\n}\nvar socket = io();\nvar rec;\nsocket.on(\"ready\", () => {\n  console.log(\"Starting recorder\");\n  if (rec) {\n    rec.stop();\n    rec = new Recorder();\n  } else {\n    rec = new Recorder();\n  }\n  var presenter = new Presenter();\n  rec.onData = blob => {\n    sendBlob(blob).then(text => {});\n  };\n  rec.start();\n  socket.on(\"mensaje\", data => {\n    presenter.append(data);\n  });\n});\nsocket.on(\"disconnect\", () => {\n  console.log(\"disconected\");\n  if (rec) {\n    rec.stop();\n    rec = null;\n  }\n});\nsocket.on(\"connect\", () => {\n  console.log(\"connected\");\n});\nsocket.on(\"hello\", () => {\n  socket.emit(\"broadcast\", {\n    roomKey: \"1JY76G7\"\n  });\n});\nsocket.connect();\n","sourceMap":"{\"version\":3,\"sources\":[\"public/src/emiterClient.ts\"],\"names\":[\"onData\",\"blob\",\"start\",\"time\",\"navigator\",\"mediaDevices\",\"getUserMedia\",\"audio\",\"then\",\"stream\",\"recorder\",\"MediaRecorder\",\"mimeType\",\"ondataavailable\",\"e\",\"data\",\"stop\",\"form\",\"FormData\",\"append\",\"Promise\",\"socket\",\"emit\",\"constructor\",\"lines\",\"queue\",\"div\",\"utils_1\",\"width\",\"height\",\"background\",\"control\",\"stopButton\",\"innerHTML\",\"onclick\",\"disabled\",\"rec\",\"show\",\"textAlign\",\"margin\",\"color\",\"fontSize\",\"textContainner\",\"document\",\"body\",\"setInterval\",\"appendWord\",\"length\",\"w\",\"splice\",\"id\",\"result\",\"push\",\"io\",\"on\",\"console\",\"log\",\"Recorder\",\"presenter\",\"Presenter\",\"sendBlob\",\"text\",\"roomKey\",\"connect\"],\"mappings\":\";;AAGA;;SACIA,SAAS,AAACC,QAAe;;EAEzBC,MAAMC,OAAO;IACTC,UAAUC,aAAaC;MAAcC,OAAO;OAAOC,KAAK,AAAAC;UAChDC,eAAeC,cAAcF;QAASG,UAAU;;MACpDF,SAASG,kBAAkB,AAACC;QACxB,KAAKd,OAAOc,EAAEC;;MAElB,KAAKL,WAAWA;MAChBA,SAASR,MAAMC;;;EAGvBa;IACI,KAAKN,SAASM;;;AAmBtB,kBAAkBf;MACVgB,WAAWC;EACfD,KAAKE,OAAO,QAAQlB;aACTmB,QAAQ;IACfC,OAAOC,KAAK,QAAQrB;;;AAK5B;EAKIsB;SAFAC;SACAC;QAEQC,MAAMC;MAAWC,OAAO;MAAQC,QAAQ;MAAQC,YAAY;;IAEhE,KAAKC,UAAUJ;QACXK,aAAaL,sBAAc;IAC/BK,WAAWC,YAAY;IACvBD,WAAWE,UAAU;MACjBF,WAAWG,WAAW;MACtBC,IAAIpB;;IAER,KAAKe,QAAQZ,OAAOa;IACpBN,IAAIP,OAAO,KAAKY;QAGZM,OAAOV;MAAWC,OAAO;MAAKU,WAAW;MAAUC,QAAQ;MAAaC,OAAO;MAAWC,UAAU;;IACxG,KAAKC,iBAAiBL;IACtBX,IAAIP,OAAOkB;IAEXM,SAASC,KAAKzB,OAAOO;IACrBmB,YAAY;MACR,KAAKC;OACN;;EAEPA;QACQ,KAAKrB,MAAMsB;UACPC,IAAI,KAAKvB,MAAMwB,OAAO,GAAG,GAAG;WAC3B,KAAKzB,MAAMwB,EAAEE;YACVxB,MAAMC;QACV,KAAKe,eAAevB,OAAOO;QAC3B,KAAKF,MAAMwB,EAAEE,MAAMxB;;MAEvB,KAAKF,MAAMwB,EAAEE,IAAIjB,YAAYe,EAAEG;;;EAKvChC,OAAOJ;IACH,KAAKU,MAAM2B,KAAKrC;;;IAOpBM,SAASgC;IAETjB;AACJf,OAAOiC,GAAG,SAAS;EACfC,QAAQC,IAAI;MACRpB;IACAA,IAAIpB;IACJoB,UAAUqB;;IAEVrB,UAAUqB;;MAGVC,gBAAgBC;EACpBvB,IAAIpC,SAAS,AAAAC;IACT2D,SAAS3D,MAAMO,KAAK,AAAAqD;;EAIxBzB,IAAIlC;EAEJmB,OAAOiC,GAAG,WAAW,AAAAvC;IAEjB2C,UAAUvC,OAAOJ;;;AAIzBM,OAAOiC,GAAG,cAAc;EACpBC,QAAQC,IAAI;MACRpB;IACAA,IAAIpB;IACJoB,MAAM;;;AAGdf,OAAOiC,GAAG,WAAW;EACjBC,QAAQC,IAAI;;AAEhBnC,OAAOiC,GAAG,SAAS;EACfjC,OAAOC,KAAK;IAAcwC,SAAS;;;AAGvCzC,OAAO0C\",\"sourcesContent\":[\"import { createDiv, createElement } from \\\"./components/utils\\\"\\r\\n\\r\\ndeclare const io : typeof import(\\\"socket.io-client\\\").default\\r\\nclass Recorder {\\r\\n    onData = (blob: Blob) => null\\r\\n    recorder: MediaRecorder\\r\\n    start(time = 3000) {\\r\\n        navigator.mediaDevices.getUserMedia({audio: true}).then(stream => {\\r\\n            var recorder = new MediaRecorder(stream, {mimeType: 'audio/webm;codecs=opus'})\\r\\n            recorder.ondataavailable = (e) => {                \\r\\n                this.onData(e.data)\\r\\n            }\\r\\n            this.recorder = recorder\\r\\n            recorder.start(time)\\r\\n        })\\r\\n    }\\r\\n    stop() {\\r\\n        this.recorder.stop()\\r\\n    }\\r\\n}\\r\\n/*\\r\\nfunction Ui(recorder: Recorder) {\\r\\n    var div = document.createElement(\\\"div\\\")\\r\\n    var button = document.createElement(\\\"button\\\")\\r\\n    button.innerHTML = \\\"Stop\\\"\\r\\n    button.onclick = () => recorder.stop()\\r\\n    div.append(button)\\r\\n    var textarea = document.createElement(\\\"div\\\")\\r\\n    div.append(textarea)\\r\\n    document.body.appendChild(div)\\r\\n    function append(text: string) {\\r\\n        textarea.innerHTML += \\\" \\\"+text\\r\\n    }\\r\\n    return {append}\\r\\n}\\r\\n*/\\r\\nfunction sendBlob(blob: Blob): Promise<string> {\\r\\n    var form = new FormData()\\r\\n    form.append(\\\"blob\\\", blob)\\r\\n    return new Promise(() => {\\r\\n        socket.emit(\\\"blob\\\", blob)\\r\\n    })\\r\\n}\\r\\n\\r\\n\\r\\nclass Presenter {\\r\\n    textContainner: HTMLDivElement;\\r\\n    control: HTMLDivElement;\\r\\n    lines: {[id: string]: HTMLDivElement} = {}\\r\\n    queue: {result: string, id: string}[] = []\\r\\n    constructor() {\\r\\n        var div = createDiv({width: \\\"100%\\\", height: \\\"100%\\\", background: \\\"#111111\\\"})\\r\\n\\r\\n        this.control = createDiv()\\r\\n        var stopButton = createElement(\\\"button\\\")\\r\\n        stopButton.innerHTML = \\\"STOP\\\"\\r\\n        stopButton.onclick = () => {\\r\\n            stopButton.disabled = true\\r\\n            rec.stop()\\r\\n        }\\r\\n        this.control.append(stopButton)\\r\\n        div.append(this.control)\\r\\n\\r\\n\\r\\n        var show = createDiv({width: 350, textAlign: \\\"center\\\", margin: \\\"auto auto\\\", color: \\\"#ffffff\\\", fontSize: 20})\\r\\n        this.textContainner = show\\r\\n        div.append(show)\\r\\n\\r\\n        document.body.append(div)\\r\\n        setInterval(() => {\\r\\n            this.appendWord()\\r\\n        }, 100)\\r\\n    }\\r\\n    appendWord() {    \\r\\n        if (this.queue.length) {\\r\\n            var w = this.queue.splice(0, 1)[0]\\r\\n            if (!this.lines[w.id]) {\\r\\n                var div = createDiv()\\r\\n                this.textContainner.append(div)\\r\\n                this.lines[w.id] = div;\\r\\n            }\\r\\n            this.lines[w.id].innerHTML = w.result\\r\\n\\r\\n        }\\r\\n    }\\r\\n\\r\\n    append(data: {result: string, id: string}) {\\r\\n        this.queue.push(data)\\r\\n   \\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nvar socket = io()\\r\\n\\r\\nvar rec: Recorder \\r\\nsocket.on(\\\"ready\\\", () => {\\r\\n    console.log(\\\"Starting recorder\\\")\\r\\n    if (rec) {\\r\\n        rec.stop()\\r\\n        rec = new Recorder()\\r\\n    } else {\\r\\n        rec = new Recorder()\\r\\n    }\\r\\n\\r\\n    var presenter = new Presenter()\\r\\n    rec.onData = blob => {\\r\\n        sendBlob(blob).then(text => {\\r\\n            //ui.append(text)\\r\\n        })    \\r\\n    }\\r\\n    rec.start()\\r\\n\\r\\n    socket.on(\\\"mensaje\\\", data => {\\r\\n        //ui.append(data.result)\\r\\n        presenter.append(data)\\r\\n    })\\r\\n    //var ui = Ui(rec)\\r\\n})\\r\\nsocket.on(\\\"disconnect\\\", () => {\\r\\n    console.log(\\\"disconected\\\")\\r\\n    if (rec) {\\r\\n        rec.stop()\\r\\n        rec = null\\r\\n    }\\r\\n})\\r\\nsocket.on(\\\"connect\\\", () => {\\r\\n    console.log(\\\"connected\\\")\\r\\n})\\r\\nsocket.on(\\\"hello\\\", () => {\\r\\n    socket.emit(\\\"broadcast\\\", {roomKey: \\\"1JY76G7\\\"})\\r\\n  \\r\\n})\\r\\nsocket.connect()\"]}"}