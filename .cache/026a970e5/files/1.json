{"contents":"exports.__esModule = true;\nvar presenter_1 = __fusereq(2);\nclass Recorder {\n  constructor() {\n    this.isAvailable = false;\n    this.onData = blob => null;\n  }\n  start(time = 4000) {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      var recorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n      recorder.ondataavailable = e => {\n        this.onData(e.data);\n      };\n      this.recorder = recorder;\n      recorder.start(time);\n      this.isAvailable = true;\n    });\n  }\n  stop() {\n    if (this.isAvailable) {\n      this.isAvailable = false;\n      this.recorder.stop();\n    }\n  }\n}\nfunction sendBlob(blob) {\n  var form = new FormData();\n  form.append(\"blob\", blob);\n  return new Promise(() => {\n    socket.emit(\"blob\", blob);\n  });\n}\nvar socket = io();\nvar rec;\nsocket.once(\"ready\", () => {\n  console.log(\"Starting recorder\");\n  if (rec) {\n    rec.stop();\n    rec = new Recorder();\n  } else {\n    rec = new Recorder();\n  }\n  var presenter = new presenter_1.Presenter(rec);\n  rec.onData = blob => {\n    sendBlob(blob);\n  };\n  rec.start();\n  socket.on(\"mensaje\", data => {\n    presenter.append(data);\n  });\n});\nsocket.on(\"disconnect\", () => {\n  console.log(\"disconected\");\n  if (rec) {\n    rec.stop();\n    rec = null;\n  }\n});\nsocket.on(\"connect\", () => {\n  console.log(\"connected\");\n});\nsocket.on(\"hello\", () => {\n  var roomkey = location.pathname || \"\";\n  if (roomkey.length < 2) {\n    throw new Error(\"sala invalida\");\n    return;\n  }\n  roomkey = roomkey.split(\"/\").slice(2)[0];\n  socket.emit(\"broadcast\", {\n    roomKey: roomkey\n  });\n});\nsocket.on(\"joined\", roomId => {\n  console.log(\"Joined to room\");\n});\nsocket.connect();\n","sourceMap":"{\"version\":3,\"sources\":[\"public/src/emiterClient.ts\"],\"names\":[\"isAvailable\",\"onData\",\"blob\",\"start\",\"time\",\"navigator\",\"mediaDevices\",\"getUserMedia\",\"audio\",\"then\",\"stream\",\"recorder\",\"MediaRecorder\",\"mimeType\",\"ondataavailable\",\"e\",\"data\",\"stop\",\"form\",\"FormData\",\"append\",\"Promise\",\"socket\",\"emit\",\"io\",\"rec\",\"once\",\"console\",\"log\",\"Recorder\",\"presenter\",\"presenter_1\",\"sendBlob\",\"on\",\"roomkey\",\"location\",\"pathname\",\"length\",\"Error\",\"split\",\"slice\",\"roomKey\",\"roomId\",\"connect\"],\"mappings\":\";;AAEA;;SACYA,cAAc;SACtBC,SAAS,AAACC,QAAe;;EAEzBC,MAAMC,OAAO;IACTC,UAAUC,aAAaC;MAAcC,OAAO;OAAOC,KAAK,AAAAC;UAChDC,eAAeC,cAAcF;QAASG,UAAU;;MACpDF,SAASG,kBAAkB,AAACC;QACxB,KAAKd,OAAOc,EAAEC;;MAElB,KAAKL,WAAWA;MAChBA,SAASR,MAAMC;MACf,KAAKJ,cAAc;;;EAG3BiB;QACQ,KAAKjB;MACL,KAAKA,cAAc;MACnB,KAAKW,SAASM;;;;AAK1B,kBAAkBf;MACVgB,WAAWC;EACfD,KAAKE,OAAO,QAAQlB;aACTmB,QAAQ;IACfC,OAAOC,KAAK,QAAQrB;;;IAIxBoB,SAASE;IAETC;AACJH,OAAOI,KAAK,SAAS;EACjBC,QAAQC,IAAI;MACRH;IACAA,IAAIR;IACJQ,UAAUI;;IAEVJ,UAAUI;;MAGVC,gBAAgBC,sBAAUN;EAC9BA,IAAIxB,SAAS,AAAAC;IACT8B,SAAS9B;;EAEbuB,IAAItB;EAEJmB,OAAOW,GAAG,WAAW,AAAAjB;IACjBc,UAAUV,OAAOJ;;;AAGzBM,OAAOW,GAAG,cAAc;EACpBN,QAAQC,IAAI;MACRH;IACAA,IAAIR;IACJQ,MAAM;;;AAGdH,OAAOW,GAAG,WAAW;EACjBN,QAAQC,IAAI;;AAEhBN,OAAOW,GAAG,SAAS;MACXC,UAAUC,SAASC,YAAY;MAC/BF,QAAQG,SAAS;cACPC,MAAM;;;EAGpBJ,UAAUA,QAAQK,MAAM,KAAKC,MAAM,GAAG;EACtClB,OAAOC,KAAK;IAAckB,SAASP;;;AAEvCZ,OAAOW,GAAG,UAAW,AAACS;EAClBf,QAAQC,IAAI;;AAEhBN,OAAOqB\",\"sourcesContent\":[\"import { Presenter } from \\\"./presenter\\\"\\r\\ndeclare const io : typeof import(\\\"socket.io-client\\\").default\\r\\nclass Recorder {\\r\\n    private isAvailable = false\\r\\n    onData = (blob: Blob) => null\\r\\n    recorder: MediaRecorder\\r\\n    start(time = 4000) {\\r\\n        navigator.mediaDevices.getUserMedia({audio: true}).then(stream => {\\r\\n            var recorder = new MediaRecorder(stream, {mimeType: 'audio/webm;codecs=opus'})\\r\\n            recorder.ondataavailable = (e) => {                \\r\\n                this.onData(e.data)\\r\\n            }\\r\\n            this.recorder = recorder\\r\\n            recorder.start(time)\\r\\n            this.isAvailable = true;\\r\\n        })\\r\\n    }\\r\\n    stop() {\\r\\n        if (this.isAvailable) {\\r\\n            this.isAvailable = false;\\r\\n            this.recorder.stop()\\r\\n        }  \\r\\n    }\\r\\n}\\r\\n\\r\\nfunction sendBlob(blob: Blob): Promise<string> {\\r\\n    var form = new FormData()\\r\\n    form.append(\\\"blob\\\", blob)\\r\\n    return new Promise(() => {\\r\\n        socket.emit(\\\"blob\\\", blob)\\r\\n    })\\r\\n}\\r\\n\\r\\nvar socket = io()\\r\\n\\r\\nvar rec: Recorder \\r\\nsocket.once(\\\"ready\\\", () => {\\r\\n    console.log(\\\"Starting recorder\\\")\\r\\n    if (rec) {\\r\\n        rec.stop()\\r\\n        rec = new Recorder()\\r\\n    } else {\\r\\n        rec = new Recorder()\\r\\n    }\\r\\n\\r\\n    var presenter = new Presenter(rec)\\r\\n    rec.onData = blob => {\\r\\n        sendBlob(blob)   \\r\\n    }\\r\\n    rec.start()\\r\\n\\r\\n    socket.on(\\\"mensaje\\\", data => {\\r\\n        presenter.append(data)\\r\\n    })\\r\\n})\\r\\nsocket.on(\\\"disconnect\\\", () => {\\r\\n    console.log(\\\"disconected\\\")\\r\\n    if (rec) {\\r\\n        rec.stop()\\r\\n        rec = null\\r\\n    }\\r\\n})\\r\\nsocket.on(\\\"connect\\\", () => {\\r\\n    console.log(\\\"connected\\\")\\r\\n})\\r\\nsocket.on(\\\"hello\\\", () => {\\r\\n    var roomkey = location.pathname || \\\"\\\"\\r\\n    if (roomkey.length < 2) {\\r\\n        throw new Error(\\\"sala invalida\\\")\\r\\n        return\\r\\n    }\\r\\n    roomkey = roomkey.split(\\\"/\\\").slice(2)[0];\\r\\n    socket.emit(\\\"broadcast\\\", {roomKey: roomkey});  \\r\\n})\\r\\nsocket.on(\\\"joined\\\",  (roomId) => {\\r\\n    console.log(\\\"Joined to room\\\")\\r\\n});  \\r\\nsocket.connect()\"]}"}