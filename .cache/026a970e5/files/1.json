{"contents":"exports.__esModule = true;\nvar presenter_1 = __fusereq(2);\nclass Recorder {\n  constructor() {\n    this.isAvailable = false;\n    this.onData = blob => null;\n    this.startTime = 0;\n    this.listenners = [];\n  }\n  start(time = 4000) {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      var recorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm;codecs=opus'\n      });\n      this.startTime = Date.now();\n      recorder.ondataavailable = e => {\n        this.onData(e.data);\n      };\n      this.recorder = recorder;\n      recorder.start(time);\n      this.isAvailable = true;\n    });\n  }\n  stop() {\n    if (this.isAvailable) {\n      this.isAvailable = false;\n      this.recorder.stop();\n      for (let cb of this.listenners) cb();\n    }\n  }\n  onStop(cb) {\n    this.listenners.push(cb);\n  }\n}\nfunction sendBlob(blob) {\n  var form = new FormData();\n  form.append(\"blob\", blob);\n  return new Promise(() => {\n    socket.emit(\"blob\", blob);\n  });\n}\nvar socket = io();\nvar rec;\nvar presenter;\nsocket.once(\"ready\", () => {\n  console.log(\"Starting recorder\");\n  rec.onData = blob => {\n    sendBlob(blob);\n  };\n  rec.start();\n  socket.on(\"mensaje\", data => {\n    presenter.append(data);\n  });\n  var interval = setInterval(() => {\n    presenter.timeElapsed = Date.now() - rec.startTime;\n  }, 200);\n  rec.onStop(() => {\n    clearInterval(interval);\n  });\n});\nsocket.on(\"disconnect\", () => {\n  if (rec) {\n    rec.stop();\n    rec = null;\n  }\n});\nsocket.on(\"error\", data => {\n  console.error(data);\n});\nsocket.on(\"connect\", () => {\n  var roomkey = location.pathname || \"\";\n  if (roomkey.length < 2) throw new Error(\"sala invalida\");\n  roomkey = roomkey.split(\"/\").slice(2)[0];\n  if (rec) {\n    rec.stop();\n  }\n  rec = new Recorder();\n  presenter = new presenter_1.Presenter(rec, roomkey);\n  socket.on(\"info\", info => {\n    presenter.title = info.eventTitle;\n    console.log(\"on info\", info);\n  });\n  socket.emit(\"broadcast\", {\n    roomKey: roomkey,\n    language: \"es-DO\"\n  });\n});\nsocket.connect();\n","sourceMap":"{\"version\":3,\"sources\":[\"public/src/emiterClient.ts\"],\"names\":[\"isAvailable\",\"onData\",\"blob\",\"startTime\",\"listenners\",\"start\",\"time\",\"navigator\",\"mediaDevices\",\"getUserMedia\",\"audio\",\"then\",\"stream\",\"recorder\",\"MediaRecorder\",\"mimeType\",\"Date\",\"now\",\"ondataavailable\",\"e\",\"data\",\"stop\",\"cb\",\"onStop\",\"push\",\"form\",\"FormData\",\"append\",\"Promise\",\"socket\",\"emit\",\"io\",\"rec\",\"presenter\",\"once\",\"console\",\"log\",\"sendBlob\",\"on\",\"interval\",\"setInterval\",\"timeElapsed\",\"clearInterval\",\"error\",\"roomkey\",\"location\",\"pathname\",\"length\",\"Error\",\"split\",\"slice\",\"Recorder\",\"presenter_1\",\"info\",\"title\",\"eventTitle\",\"roomKey\",\"language\",\"connect\"],\"mappings\":\";;AAEA;;SACYA,cAAc;SACtBC,SAAS,AAACC,QAAe;SAEzBC,YAAY;SAoBJC;;EAnBRC,MAAMC,OAAO;IACTC,UAAUC,aAAaC;MAAcC,OAAO;OAAOC,KAAK,AAAAC;UAChDC,eAAeC,cAAcF;QAASG,UAAU;;MACpD,KAAKZ,YAAYa,KAAKC;MACtBJ,SAASK,kBAAkB,AAACC;QACxB,KAAKlB,OAAOkB,EAAEC;;MAElB,KAAKP,WAAWA;MAChBA,SAASR,MAAMC;MACf,KAAKN,cAAc;;;EAG3BqB;QACQ,KAAKrB;MACL,KAAKA,cAAc;MACnB,KAAKa,SAASQ;eACLC,MAAM,KAAKlB,YAAYkB;;;EAIxCC,OAAOD;IACH,KAAKlB,WAAWoB,KAAKF;;;AAI7B,kBAAkBpB;MACVuB,WAAWC;EACfD,KAAKE,OAAO,QAAQzB;aACT0B,QAAQ;IACfC,OAAOC,KAAK,QAAQ5B;;;IAIxB2B,SAASE;IAETC;IACAC;AACJJ,OAAOK,KAAK,SAAS;EACjBC,QAAQC,IAAI;EAEZJ,IAAI/B,SAAS,AAAAC;IACTmC,SAASnC;;EAEb8B,IAAI3B;EAEJwB,OAAOS,GAAG,WAAW,AAAAlB;IACjBa,UAAUN,OAAOP;;MAEjBmB,WAAWC,YAAY;IACvBP,UAAUQ,cAAezB,KAAKC,QAAQe,IAAI7B;KAC3C;EAEH6B,IAAIT,OAAO;IACPmB,cAAcH;;;AAKtBV,OAAOS,GAAG,cAAc;MAChBN;IACAA,IAAIX;IACJW,MAAM;;;AAGdH,OAAOS,GAAG,SAAS,AAAClB;EAChBe,QAAQQ,MAAMvB;;AAElBS,OAAOS,GAAG,WAAW;MACbM,UAAUC,SAASC,YAAY;MAC/BF,QAAQG,SAAS,aAAaC,MAAM;EACxCJ,UAAUA,QAAQK,MAAM,KAAKC,MAAM,GAAG;MAElClB;IACAA,IAAIX;;EAERW,UAAUmB;EACVlB,gBAAgBmB,sBAAUpB,KAAKY;EAC/Bf,OAAOS,GAAG,QAAQ,AAACe;IACfpB,UAAUqB,QAAQD,KAAKE;IACvBpB,QAAQC,IAAI,WAAWiB;;EAG3BxB,OAAOC,KAAK;IAAc0B,SAASZ;IAASa,UAAU;;;AAI1D5B,OAAO6B\",\"sourcesContent\":[\"import { Presenter } from \\\"./presenter\\\"\\r\\ndeclare const io : typeof import(\\\"socket.io-client\\\").default\\r\\nclass Recorder {\\r\\n    private isAvailable = false\\r\\n    onData = (blob: Blob) => null\\r\\n    recorder: MediaRecorder\\r\\n    startTime = 0;\\r\\n    start(time = 4000) {\\r\\n        navigator.mediaDevices.getUserMedia({audio: true}).then(stream => {\\r\\n            var recorder = new MediaRecorder(stream, {mimeType: 'audio/webm;codecs=opus'})\\r\\n            this.startTime = Date.now();\\r\\n            recorder.ondataavailable = (e) => {                \\r\\n                this.onData(e.data)\\r\\n            }\\r\\n            this.recorder = recorder\\r\\n            recorder.start(time)\\r\\n            this.isAvailable = true;     \\r\\n        })\\r\\n    }\\r\\n    stop() {\\r\\n        if (this.isAvailable) {\\r\\n            this.isAvailable = false;\\r\\n            this.recorder.stop()\\r\\n            for (let cb of this.listenners) cb()\\r\\n        }  \\r\\n    }\\r\\n    private listenners = [];\\r\\n    onStop(cb) {\\r\\n        this.listenners.push(cb)\\r\\n    }\\r\\n}\\r\\n\\r\\nfunction sendBlob(blob: Blob): Promise<string> {\\r\\n    var form = new FormData()\\r\\n    form.append(\\\"blob\\\", blob)\\r\\n    return new Promise(() => {\\r\\n        socket.emit(\\\"blob\\\", blob)\\r\\n    })\\r\\n}\\r\\n\\r\\nvar socket = io()\\r\\n\\r\\nvar rec: Recorder \\r\\nvar presenter : Presenter\\r\\nsocket.once(\\\"ready\\\", () => {\\r\\n    console.log(\\\"Starting recorder\\\")\\r\\n\\r\\n    rec.onData = blob => {\\r\\n        sendBlob(blob)   \\r\\n    }\\r\\n    rec.start()\\r\\n\\r\\n    socket.on(\\\"mensaje\\\", data => {\\r\\n        presenter.append(data)\\r\\n    })\\r\\n    var interval = setInterval(() => {\\r\\n        presenter.timeElapsed =  Date.now() - rec.startTime  \\r\\n    }, 200)\\r\\n\\r\\n    rec.onStop(() => {\\r\\n        clearInterval(interval);\\r\\n    })\\r\\n\\r\\n})\\r\\n\\r\\nsocket.on(\\\"disconnect\\\", () => {\\r\\n    if (rec) {\\r\\n        rec.stop()\\r\\n        rec = null\\r\\n    }\\r\\n})\\r\\nsocket.on(\\\"error\\\", (data) => {\\r\\n    console.error(data)\\r\\n})\\r\\nsocket.on(\\\"connect\\\", () => {    \\r\\n    var roomkey = location.pathname || \\\"\\\"\\r\\n    if (roomkey.length < 2) throw new Error(\\\"sala invalida\\\")\\r\\n    roomkey = roomkey.split(\\\"/\\\").slice(2)[0];\\r\\n\\r\\n    if (rec) {\\r\\n        rec.stop()\\r\\n    } \\r\\n    rec = new Recorder()\\r\\n    presenter = new Presenter(rec, roomkey)\\r\\n    socket.on(\\\"info\\\", (info: {photoUrl: string, eventTitle: string}) => {\\r\\n        presenter.title = info.eventTitle;\\r\\n        console.log(\\\"on info\\\", info)\\r\\n    })\\r\\n\\r\\n    socket.emit(\\\"broadcast\\\", {roomKey: roomkey, language: \\\"es-DO\\\"}); \\r\\n    \\r\\n    \\r\\n})\\r\\nsocket.connect()\"]}"}