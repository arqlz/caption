{"contents":"var process = __fusereq(59);\nvar buffer = __fusereq(51);\nvar Buffer = buffer;\n'use strict';\nvar debug = __fusereq(23)('finalhandler');\nvar encodeUrl = __fusereq(41);\nvar escapeHtml = __fusereq(42);\nvar onFinished = __fusereq(43);\nvar parseUrl = __fusereq(37);\nvar statuses = __fusereq(44);\nvar unpipe = __fusereq(58);\nvar DOUBLE_SPACE_REGEXP = /\\x20{2}/g;\nvar NEWLINE_REGEXP = /\\n/g;\nvar defer = typeof setImmediate === 'function' ? setImmediate : function (fn) {\n  process.nextTick(fn.bind.apply(fn, arguments));\n};\nvar isFinished = onFinished.isFinished;\nfunction createHtmlDocument(message) {\n  var body = escapeHtml(message).replace(NEWLINE_REGEXP, '<br>').replace(DOUBLE_SPACE_REGEXP, ' &nbsp;');\n  return '<!DOCTYPE html>\\n' + '<html lang=\"en\">\\n' + '<head>\\n' + '<meta charset=\"utf-8\">\\n' + '<title>Error</title>\\n' + '</head>\\n' + '<body>\\n' + '<pre>' + body + '</pre>\\n' + '</body>\\n' + '</html>\\n';\n}\nmodule.exports = finalhandler;\nfunction finalhandler(req, res, options) {\n  var opts = options || ({});\n  var env = opts.env || \"development\" || 'development';\n  var onerror = opts.onerror;\n  return function (err) {\n    var headers;\n    var msg;\n    var status;\n    if (!err && headersSent(res)) {\n      debug('cannot 404 after headers sent');\n      return;\n    }\n    if (err) {\n      status = getErrorStatusCode(err);\n      if (status === undefined) {\n        status = getResponseStatusCode(res);\n      } else {\n        headers = getErrorHeaders(err);\n      }\n      msg = getErrorMessage(err, status, env);\n    } else {\n      status = 404;\n      msg = 'Cannot ' + req.method + ' ' + encodeUrl(getResourceName(req));\n    }\n    debug('default %s', status);\n    if (err && onerror) {\n      defer(onerror, err, req, res);\n    }\n    if (headersSent(res)) {\n      debug('cannot %d after headers sent', status);\n      req.socket.destroy();\n      return;\n    }\n    send(req, res, status, headers, msg);\n  };\n}\nfunction getErrorHeaders(err) {\n  if (!err.headers || typeof err.headers !== 'object') {\n    return undefined;\n  }\n  var headers = Object.create(null);\n  var keys = Object.keys(err.headers);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    headers[key] = err.headers[key];\n  }\n  return headers;\n}\nfunction getErrorMessage(err, status, env) {\n  var msg;\n  if (env !== 'production') {\n    msg = err.stack;\n    if (!msg && typeof err.toString === 'function') {\n      msg = err.toString();\n    }\n  }\n  return msg || statuses[status];\n}\nfunction getErrorStatusCode(err) {\n  if (typeof err.status === 'number' && err.status >= 400 && err.status < 600) {\n    return err.status;\n  }\n  if (typeof err.statusCode === 'number' && err.statusCode >= 400 && err.statusCode < 600) {\n    return err.statusCode;\n  }\n  return undefined;\n}\nfunction getResourceName(req) {\n  try {\n    return parseUrl.original(req).pathname;\n  } catch (e) {\n    return 'resource';\n  }\n}\nfunction getResponseStatusCode(res) {\n  var status = res.statusCode;\n  if (typeof status !== 'number' || status < 400 || status > 599) {\n    status = 500;\n  }\n  return status;\n}\nfunction headersSent(res) {\n  return typeof res.headersSent !== 'boolean' ? Boolean(res._header) : res.headersSent;\n}\nfunction send(req, res, status, headers, message) {\n  function write() {\n    var body = createHtmlDocument(message);\n    res.statusCode = status;\n    res.statusMessage = statuses[status];\n    setHeaders(res, headers);\n    res.setHeader('Content-Security-Policy', \"default-src 'none'\");\n    res.setHeader('X-Content-Type-Options', 'nosniff');\n    res.setHeader('Content-Type', 'text/html; charset=utf-8');\n    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'));\n    if (req.method === 'HEAD') {\n      res.end();\n      return;\n    }\n    res.end(body, 'utf8');\n  }\n  if (isFinished(req)) {\n    write();\n    return;\n  }\n  unpipe(req);\n  onFinished(req, write);\n  req.resume();\n}\nfunction setHeaders(res, headers) {\n  if (!headers) {\n    return;\n  }\n  var keys = Object.keys(headers);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    res.setHeader(key, headers[key]);\n  }\n}\n"}