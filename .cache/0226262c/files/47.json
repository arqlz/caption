{"contents":"var buffer = __fusereq(51);\nvar Buffer = buffer;\n'use strict';\nvar createError = __fusereq(54);\nvar debug = __fusereq(23)('send');\nvar deprecate = __fusereq(15)('send');\nvar destroy = __fusereq(75);\nvar encodeUrl = __fusereq(41);\nvar escapeHtml = __fusereq(42);\nvar etag = __fusereq(61);\nvar fresh = __fusereq(35);\nvar fs = __fusereq(60);\nvar mime = __fusereq(76);\nvar ms = __fusereq(77);\nvar onFinished = __fusereq(43);\nvar parseRange = __fusereq(36);\nvar path = __fusereq(29);\nvar statuses = __fusereq(44);\nvar Stream = __fusereq(78);\nvar util = __fusereq(79);\nvar extname = path.extname;\nvar join = path.join;\nvar normalize = path.normalize;\nvar resolve = path.resolve;\nvar sep = path.sep;\nvar BYTES_RANGE_REGEXP = /^ *bytes=/;\nvar MAX_MAXAGE = 60 * 60 * 24 * 365 * 1000;\nvar UP_PATH_REGEXP = /(?:^|[\\\\/])\\.\\.(?:[\\\\/]|$)/;\nmodule.exports = send;\nmodule.exports.mime = mime;\nfunction send(req, path, options) {\n  return new SendStream(req, path, options);\n}\nfunction SendStream(req, path, options) {\n  Stream.call(this);\n  var opts = options || ({});\n  this.options = opts;\n  this.path = path;\n  this.req = req;\n  this._acceptRanges = opts.acceptRanges !== undefined ? Boolean(opts.acceptRanges) : true;\n  this._cacheControl = opts.cacheControl !== undefined ? Boolean(opts.cacheControl) : true;\n  this._etag = opts.etag !== undefined ? Boolean(opts.etag) : true;\n  this._dotfiles = opts.dotfiles !== undefined ? opts.dotfiles : 'ignore';\n  if (this._dotfiles !== 'ignore' && this._dotfiles !== 'allow' && this._dotfiles !== 'deny') {\n    throw new TypeError('dotfiles option must be \"allow\", \"deny\", or \"ignore\"');\n  }\n  this._hidden = Boolean(opts.hidden);\n  if (opts.hidden !== undefined) {\n    deprecate('hidden: use dotfiles: \\'' + (this._hidden ? 'allow' : 'ignore') + '\\' instead');\n  }\n  if (opts.dotfiles === undefined) {\n    this._dotfiles = undefined;\n  }\n  this._extensions = opts.extensions !== undefined ? normalizeList(opts.extensions, 'extensions option') : [];\n  this._immutable = opts.immutable !== undefined ? Boolean(opts.immutable) : false;\n  this._index = opts.index !== undefined ? normalizeList(opts.index, 'index option') : ['index.html'];\n  this._lastModified = opts.lastModified !== undefined ? Boolean(opts.lastModified) : true;\n  this._maxage = opts.maxAge || opts.maxage;\n  this._maxage = typeof this._maxage === 'string' ? ms(this._maxage) : Number(this._maxage);\n  this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE) : 0;\n  this._root = opts.root ? resolve(opts.root) : null;\n  if (!this._root && opts.from) {\n    this.from(opts.from);\n  }\n}\nutil.inherits(SendStream, Stream);\nSendStream.prototype.etag = deprecate.function(function etag(val) {\n  this._etag = Boolean(val);\n  debug('etag %s', this._etag);\n  return this;\n}, 'send.etag: pass etag as option');\nSendStream.prototype.hidden = deprecate.function(function hidden(val) {\n  this._hidden = Boolean(val);\n  this._dotfiles = undefined;\n  debug('hidden %s', this._hidden);\n  return this;\n}, 'send.hidden: use dotfiles option');\nSendStream.prototype.index = deprecate.function(function index(paths) {\n  var index = !paths ? [] : normalizeList(paths, 'paths argument');\n  debug('index %o', paths);\n  this._index = index;\n  return this;\n}, 'send.index: pass index as option');\nSendStream.prototype.root = function root(path) {\n  this._root = resolve(String(path));\n  debug('root %s', this._root);\n  return this;\n};\nSendStream.prototype.from = deprecate.function(SendStream.prototype.root, 'send.from: pass root as option');\nSendStream.prototype.root = deprecate.function(SendStream.prototype.root, 'send.root: pass root as option');\nSendStream.prototype.maxage = deprecate.function(function maxage(maxAge) {\n  this._maxage = typeof maxAge === 'string' ? ms(maxAge) : Number(maxAge);\n  this._maxage = !isNaN(this._maxage) ? Math.min(Math.max(0, this._maxage), MAX_MAXAGE) : 0;\n  debug('max-age %d', this._maxage);\n  return this;\n}, 'send.maxage: pass maxAge as option');\nSendStream.prototype.error = function error(status, err) {\n  if (hasListeners(this, 'error')) {\n    return this.emit('error', createError(status, err, {\n      expose: false\n    }));\n  }\n  var res = this.res;\n  var msg = statuses[status] || String(status);\n  var doc = createHtmlDocument('Error', escapeHtml(msg));\n  clearHeaders(res);\n  if (err && err.headers) {\n    setHeaders(res, err.headers);\n  }\n  res.statusCode = status;\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n  res.setHeader('Content-Length', Buffer.byteLength(doc));\n  res.setHeader('Content-Security-Policy', \"default-src 'none'\");\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n  res.end(doc);\n};\nSendStream.prototype.hasTrailingSlash = function hasTrailingSlash() {\n  return this.path[this.path.length - 1] === '/';\n};\nSendStream.prototype.isConditionalGET = function isConditionalGET() {\n  return this.req.headers['if-match'] || this.req.headers['if-unmodified-since'] || this.req.headers['if-none-match'] || this.req.headers['if-modified-since'];\n};\nSendStream.prototype.isPreconditionFailure = function isPreconditionFailure() {\n  var req = this.req;\n  var res = this.res;\n  var match = req.headers['if-match'];\n  if (match) {\n    var etag = res.getHeader('ETag');\n    return !etag || match !== '*' && parseTokenList(match).every(function (match) {\n      return match !== etag && match !== 'W/' + etag && 'W/' + match !== etag;\n    });\n  }\n  var unmodifiedSince = parseHttpDate(req.headers['if-unmodified-since']);\n  if (!isNaN(unmodifiedSince)) {\n    var lastModified = parseHttpDate(res.getHeader('Last-Modified'));\n    return isNaN(lastModified) || lastModified > unmodifiedSince;\n  }\n  return false;\n};\nSendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields() {\n  var res = this.res;\n  var headers = getHeaderNames(res);\n  for (var i = 0; i < headers.length; i++) {\n    var header = headers[i];\n    if (header.substr(0, 8) === 'content-' && header !== 'content-location') {\n      res.removeHeader(header);\n    }\n  }\n};\nSendStream.prototype.notModified = function notModified() {\n  var res = this.res;\n  debug('not modified');\n  this.removeContentHeaderFields();\n  res.statusCode = 304;\n  res.end();\n};\nSendStream.prototype.headersAlreadySent = function headersAlreadySent() {\n  var err = new Error('Can\\'t set headers after they are sent.');\n  debug('headers already sent');\n  this.error(500, err);\n};\nSendStream.prototype.isCachable = function isCachable() {\n  var statusCode = this.res.statusCode;\n  return statusCode >= 200 && statusCode < 300 || statusCode === 304;\n};\nSendStream.prototype.onStatError = function onStatError(error) {\n  switch (error.code) {\n    case 'ENAMETOOLONG':\n    case 'ENOENT':\n    case 'ENOTDIR':\n      this.error(404, error);\n      break;\n    default:\n      this.error(500, error);\n      break;\n  }\n};\nSendStream.prototype.isFresh = function isFresh() {\n  return fresh(this.req.headers, {\n    etag: this.res.getHeader('ETag'),\n    'last-modified': this.res.getHeader('Last-Modified')\n  });\n};\nSendStream.prototype.isRangeFresh = function isRangeFresh() {\n  var ifRange = this.req.headers['if-range'];\n  if (!ifRange) {\n    return true;\n  }\n  if (ifRange.indexOf('\"') !== -1) {\n    var etag = this.res.getHeader('ETag');\n    return Boolean(etag && ifRange.indexOf(etag) !== -1);\n  }\n  var lastModified = this.res.getHeader('Last-Modified');\n  return parseHttpDate(lastModified) <= parseHttpDate(ifRange);\n};\nSendStream.prototype.redirect = function redirect(path) {\n  var res = this.res;\n  if (hasListeners(this, 'directory')) {\n    this.emit('directory', res, path);\n    return;\n  }\n  if (this.hasTrailingSlash()) {\n    this.error(403);\n    return;\n  }\n  var loc = encodeUrl(collapseLeadingSlashes(this.path + '/'));\n  var doc = createHtmlDocument('Redirecting', 'Redirecting to <a href=\"' + escapeHtml(loc) + '\">' + escapeHtml(loc) + '</a>');\n  res.statusCode = 301;\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n  res.setHeader('Content-Length', Buffer.byteLength(doc));\n  res.setHeader('Content-Security-Policy', \"default-src 'none'\");\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n  res.setHeader('Location', loc);\n  res.end(doc);\n};\nSendStream.prototype.pipe = function pipe(res) {\n  var root = this._root;\n  this.res = res;\n  var path = decode(this.path);\n  if (path === -1) {\n    this.error(400);\n    return res;\n  }\n  if (~path.indexOf('\\0')) {\n    this.error(400);\n    return res;\n  }\n  var parts;\n  if (root !== null) {\n    if (path) {\n      path = normalize('.' + sep + path);\n    }\n    if (UP_PATH_REGEXP.test(path)) {\n      debug('malicious path \"%s\"', path);\n      this.error(403);\n      return res;\n    }\n    parts = path.split(sep);\n    path = normalize(join(root, path));\n  } else {\n    if (UP_PATH_REGEXP.test(path)) {\n      debug('malicious path \"%s\"', path);\n      this.error(403);\n      return res;\n    }\n    parts = normalize(path).split(sep);\n    path = resolve(path);\n  }\n  if (containsDotFile(parts)) {\n    var access = this._dotfiles;\n    if (access === undefined) {\n      access = parts[parts.length - 1][0] === '.' ? this._hidden ? 'allow' : 'ignore' : 'allow';\n    }\n    debug('%s dotfile \"%s\"', access, path);\n    switch (access) {\n      case 'allow':\n        break;\n      case 'deny':\n        this.error(403);\n        return res;\n      case 'ignore':\n      default:\n        this.error(404);\n        return res;\n    }\n  }\n  if (this._index.length && this.hasTrailingSlash()) {\n    this.sendIndex(path);\n    return res;\n  }\n  this.sendFile(path);\n  return res;\n};\nSendStream.prototype.send = function send(path, stat) {\n  var len = stat.size;\n  var options = this.options;\n  var opts = {};\n  var res = this.res;\n  var req = this.req;\n  var ranges = req.headers.range;\n  var offset = options.start || 0;\n  if (headersSent(res)) {\n    this.headersAlreadySent();\n    return;\n  }\n  debug('pipe \"%s\"', path);\n  this.setHeader(path, stat);\n  this.type(path);\n  if (this.isConditionalGET()) {\n    if (this.isPreconditionFailure()) {\n      this.error(412);\n      return;\n    }\n    if (this.isCachable() && this.isFresh()) {\n      this.notModified();\n      return;\n    }\n  }\n  len = Math.max(0, len - offset);\n  if (options.end !== undefined) {\n    var bytes = options.end - offset + 1;\n    if (len > bytes) len = bytes;\n  }\n  if (this._acceptRanges && BYTES_RANGE_REGEXP.test(ranges)) {\n    ranges = parseRange(len, ranges, {\n      combine: true\n    });\n    if (!this.isRangeFresh()) {\n      debug('range stale');\n      ranges = -2;\n    }\n    if (ranges === -1) {\n      debug('range unsatisfiable');\n      res.setHeader('Content-Range', contentRange('bytes', len));\n      return this.error(416, {\n        headers: {\n          'Content-Range': res.getHeader('Content-Range')\n        }\n      });\n    }\n    if (ranges !== -2 && ranges.length === 1) {\n      debug('range %j', ranges);\n      res.statusCode = 206;\n      res.setHeader('Content-Range', contentRange('bytes', len, ranges[0]));\n      offset += ranges[0].start;\n      len = ranges[0].end - ranges[0].start + 1;\n    }\n  }\n  for (var prop in options) {\n    opts[prop] = options[prop];\n  }\n  opts.start = offset;\n  opts.end = Math.max(offset, offset + len - 1);\n  res.setHeader('Content-Length', len);\n  if (req.method === 'HEAD') {\n    res.end();\n    return;\n  }\n  this.stream(path, opts);\n};\nSendStream.prototype.sendFile = function sendFile(path) {\n  var i = 0;\n  var self = this;\n  debug('stat \"%s\"', path);\n  fs.stat(path, function onstat(err, stat) {\n    if (err && err.code === 'ENOENT' && !extname(path) && path[path.length - 1] !== sep) {\n      return next(err);\n    }\n    if (err) return self.onStatError(err);\n    if (stat.isDirectory()) return self.redirect(path);\n    self.emit('file', path, stat);\n    self.send(path, stat);\n  });\n  function next(err) {\n    if (self._extensions.length <= i) {\n      return err ? self.onStatError(err) : self.error(404);\n    }\n    var p = path + '.' + self._extensions[i++];\n    debug('stat \"%s\"', p);\n    fs.stat(p, function (err, stat) {\n      if (err) return next(err);\n      if (stat.isDirectory()) return next();\n      self.emit('file', p, stat);\n      self.send(p, stat);\n    });\n  }\n};\nSendStream.prototype.sendIndex = function sendIndex(path) {\n  var i = -1;\n  var self = this;\n  function next(err) {\n    if (++i >= self._index.length) {\n      if (err) return self.onStatError(err);\n      return self.error(404);\n    }\n    var p = join(path, self._index[i]);\n    debug('stat \"%s\"', p);\n    fs.stat(p, function (err, stat) {\n      if (err) return next(err);\n      if (stat.isDirectory()) return next();\n      self.emit('file', p, stat);\n      self.send(p, stat);\n    });\n  }\n  next();\n};\nSendStream.prototype.stream = function stream(path, options) {\n  var finished = false;\n  var self = this;\n  var res = this.res;\n  var stream = fs.createReadStream(path, options);\n  this.emit('stream', stream);\n  stream.pipe(res);\n  onFinished(res, function onfinished() {\n    finished = true;\n    destroy(stream);\n  });\n  stream.on('error', function onerror(err) {\n    if (finished) return;\n    finished = true;\n    destroy(stream);\n    self.onStatError(err);\n  });\n  stream.on('end', function onend() {\n    self.emit('end');\n  });\n};\nSendStream.prototype.type = function type(path) {\n  var res = this.res;\n  if (res.getHeader('Content-Type')) return;\n  var type = mime.lookup(path);\n  if (!type) {\n    debug('no content-type');\n    return;\n  }\n  var charset = mime.charsets.lookup(type);\n  debug('content-type %s', type);\n  res.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''));\n};\nSendStream.prototype.setHeader = function setHeader(path, stat) {\n  var res = this.res;\n  this.emit('headers', res, path, stat);\n  if (this._acceptRanges && !res.getHeader('Accept-Ranges')) {\n    debug('accept ranges');\n    res.setHeader('Accept-Ranges', 'bytes');\n  }\n  if (this._cacheControl && !res.getHeader('Cache-Control')) {\n    var cacheControl = 'public, max-age=' + Math.floor(this._maxage / 1000);\n    if (this._immutable) {\n      cacheControl += ', immutable';\n    }\n    debug('cache-control %s', cacheControl);\n    res.setHeader('Cache-Control', cacheControl);\n  }\n  if (this._lastModified && !res.getHeader('Last-Modified')) {\n    var modified = stat.mtime.toUTCString();\n    debug('modified %s', modified);\n    res.setHeader('Last-Modified', modified);\n  }\n  if (this._etag && !res.getHeader('ETag')) {\n    var val = etag(stat);\n    debug('etag %s', val);\n    res.setHeader('ETag', val);\n  }\n};\nfunction clearHeaders(res) {\n  var headers = getHeaderNames(res);\n  for (var i = 0; i < headers.length; i++) {\n    res.removeHeader(headers[i]);\n  }\n}\nfunction collapseLeadingSlashes(str) {\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] !== '/') {\n      break;\n    }\n  }\n  return i > 1 ? '/' + str.substr(i) : str;\n}\nfunction containsDotFile(parts) {\n  for (var i = 0; i < parts.length; i++) {\n    var part = parts[i];\n    if (part.length > 1 && part[0] === '.') {\n      return true;\n    }\n  }\n  return false;\n}\nfunction contentRange(type, size, range) {\n  return type + ' ' + (range ? range.start + '-' + range.end : '*') + '/' + size;\n}\nfunction createHtmlDocument(title, body) {\n  return '<!DOCTYPE html>\\n' + '<html lang=\"en\">\\n' + '<head>\\n' + '<meta charset=\"utf-8\">\\n' + '<title>' + title + '</title>\\n' + '</head>\\n' + '<body>\\n' + '<pre>' + body + '</pre>\\n' + '</body>\\n' + '</html>\\n';\n}\nfunction decode(path) {\n  try {\n    return decodeURIComponent(path);\n  } catch (err) {\n    return -1;\n  }\n}\nfunction getHeaderNames(res) {\n  return typeof res.getHeaderNames !== 'function' ? Object.keys(res._headers || ({})) : res.getHeaderNames();\n}\nfunction hasListeners(emitter, type) {\n  var count = typeof emitter.listenerCount !== 'function' ? emitter.listeners(type).length : emitter.listenerCount(type);\n  return count > 0;\n}\nfunction headersSent(res) {\n  return typeof res.headersSent !== 'boolean' ? Boolean(res._header) : res.headersSent;\n}\nfunction normalizeList(val, name) {\n  var list = [].concat(val || []);\n  for (var i = 0; i < list.length; i++) {\n    if (typeof list[i] !== 'string') {\n      throw new TypeError(name + ' must be array of strings or false');\n    }\n  }\n  return list;\n}\nfunction parseHttpDate(date) {\n  var timestamp = date && Date.parse(date);\n  return typeof timestamp === 'number' ? timestamp : NaN;\n}\nfunction parseTokenList(str) {\n  var end = 0;\n  var list = [];\n  var start = 0;\n  for (var i = 0, len = str.length; i < len; i++) {\n    switch (str.charCodeAt(i)) {\n      case 0x20:\n        if (start === end) {\n          start = end = i + 1;\n        }\n        break;\n      case 0x2c:\n        if (start !== end) {\n          list.push(str.substring(start, end));\n        }\n        start = end = i + 1;\n        break;\n      default:\n        end = i + 1;\n        break;\n    }\n  }\n  if (start !== end) {\n    list.push(str.substring(start, end));\n  }\n  return list;\n}\nfunction setHeaders(res, headers) {\n  var keys = Object.keys(headers);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    res.setHeader(key, headers[key]);\n  }\n}\n"}