{"contents":"var buffer = __fusereq(51);\nvar Buffer = buffer;\n'use strict';\nvar encodeUrl = __fusereq(41);\nvar escapeHtml = __fusereq(42);\nvar parseUrl = __fusereq(37);\nvar resolve = __fusereq(29).resolve;\nvar send = __fusereq(47);\nvar url = __fusereq(50);\nmodule.exports = serveStatic;\nmodule.exports.mime = send.mime;\nfunction serveStatic(root, options) {\n  if (!root) {\n    throw new TypeError('root path required');\n  }\n  if (typeof root !== 'string') {\n    throw new TypeError('root path must be a string');\n  }\n  var opts = Object.create(options || null);\n  var fallthrough = opts.fallthrough !== false;\n  var redirect = opts.redirect !== false;\n  var setHeaders = opts.setHeaders;\n  if (setHeaders && typeof setHeaders !== 'function') {\n    throw new TypeError('option setHeaders must be function');\n  }\n  opts.maxage = opts.maxage || opts.maxAge || 0;\n  opts.root = resolve(root);\n  var onDirectory = redirect ? createRedirectDirectoryListener() : createNotFoundDirectoryListener();\n  return function serveStatic(req, res, next) {\n    if (req.method !== 'GET' && req.method !== 'HEAD') {\n      if (fallthrough) {\n        return next();\n      }\n      res.statusCode = 405;\n      res.setHeader('Allow', 'GET, HEAD');\n      res.setHeader('Content-Length', '0');\n      res.end();\n      return;\n    }\n    var forwardError = !fallthrough;\n    var originalUrl = parseUrl.original(req);\n    var path = parseUrl(req).pathname;\n    if (path === '/' && originalUrl.pathname.substr(-1) !== '/') {\n      path = '';\n    }\n    var stream = send(req, path, opts);\n    stream.on('directory', onDirectory);\n    if (setHeaders) {\n      stream.on('headers', setHeaders);\n    }\n    if (fallthrough) {\n      stream.on('file', function onFile() {\n        forwardError = true;\n      });\n    }\n    stream.on('error', function error(err) {\n      if (forwardError || !(err.statusCode < 500)) {\n        next(err);\n        return;\n      }\n      next();\n    });\n    stream.pipe(res);\n  };\n}\nfunction collapseLeadingSlashes(str) {\n  for (var i = 0; i < str.length; i++) {\n    if (str.charCodeAt(i) !== 0x2f) {\n      break;\n    }\n  }\n  return i > 1 ? '/' + str.substr(i) : str;\n}\nfunction createHtmlDocument(title, body) {\n  return '<!DOCTYPE html>\\n' + '<html lang=\"en\">\\n' + '<head>\\n' + '<meta charset=\"utf-8\">\\n' + '<title>' + title + '</title>\\n' + '</head>\\n' + '<body>\\n' + '<pre>' + body + '</pre>\\n' + '</body>\\n' + '</html>\\n';\n}\nfunction createNotFoundDirectoryListener() {\n  return function notFound() {\n    this.error(404);\n  };\n}\nfunction createRedirectDirectoryListener() {\n  return function redirect(res) {\n    if (this.hasTrailingSlash()) {\n      this.error(404);\n      return;\n    }\n    var originalUrl = parseUrl.original(this.req);\n    originalUrl.path = null;\n    originalUrl.pathname = collapseLeadingSlashes(originalUrl.pathname + '/');\n    var loc = encodeUrl(url.format(originalUrl));\n    var doc = createHtmlDocument('Redirecting', 'Redirecting to <a href=\"' + escapeHtml(loc) + '\">' + escapeHtml(loc) + '</a>');\n    res.statusCode = 301;\n    res.setHeader('Content-Type', 'text/html; charset=UTF-8');\n    res.setHeader('Content-Length', Buffer.byteLength(doc));\n    res.setHeader('Content-Security-Policy', \"default-src 'none'\");\n    res.setHeader('X-Content-Type-Options', 'nosniff');\n    res.setHeader('Location', loc);\n    res.end(doc);\n  };\n}\n"}