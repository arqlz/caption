{"contents":"'use strict';\nvar Buffer = __fusereq(39).Buffer;\nvar contentDisposition = __fusereq(40);\nvar deprecate = __fusereq(15)('express');\nvar encodeUrl = __fusereq(41);\nvar escapeHtml = __fusereq(42);\nvar http = __fusereq(25);\nvar isAbsolute = __fusereq(26).isAbsolute;\nvar onFinished = __fusereq(43);\nvar path = __fusereq(29);\nvar statuses = __fusereq(44);\nvar merge = __fusereq(28);\nvar sign = __fusereq(45).sign;\nvar normalizeType = __fusereq(26).normalizeType;\nvar normalizeTypes = __fusereq(26).normalizeTypes;\nvar setCharset = __fusereq(26).setCharset;\nvar cookie = __fusereq(46);\nvar send = __fusereq(47);\nvar extname = path.extname;\nvar mime = send.mime;\nvar resolve = path.resolve;\nvar vary = __fusereq(48);\nvar res = Object.create(http.ServerResponse.prototype);\nmodule.exports = res;\nvar charsetRegExp = /;\\s*charset\\s*=/;\nres.status = function status(code) {\n  this.statusCode = code;\n  return this;\n};\nres.links = function (links) {\n  var link = this.get('Link') || '';\n  if (link) link += ', ';\n  return this.set('Link', link + Object.keys(links).map(function (rel) {\n    return '<' + links[rel] + '>; rel=\"' + rel + '\"';\n  }).join(', '));\n};\nres.send = function send(body) {\n  var chunk = body;\n  var encoding;\n  var req = this.req;\n  var type;\n  var app = this.app;\n  if (arguments.length === 2) {\n    if (typeof arguments[0] !== 'number' && typeof arguments[1] === 'number') {\n      deprecate('res.send(body, status): Use res.status(status).send(body) instead');\n      this.statusCode = arguments[1];\n    } else {\n      deprecate('res.send(status, body): Use res.status(status).send(body) instead');\n      this.statusCode = arguments[0];\n      chunk = arguments[1];\n    }\n  }\n  if (typeof chunk === 'number' && arguments.length === 1) {\n    if (!this.get('Content-Type')) {\n      this.type('txt');\n    }\n    deprecate('res.send(status): Use res.sendStatus(status) instead');\n    this.statusCode = chunk;\n    chunk = statuses[chunk];\n  }\n  switch (typeof chunk) {\n    case 'string':\n      if (!this.get('Content-Type')) {\n        this.type('html');\n      }\n      break;\n    case 'boolean':\n    case 'number':\n    case 'object':\n      if (chunk === null) {\n        chunk = '';\n      } else if (Buffer.isBuffer(chunk)) {\n        if (!this.get('Content-Type')) {\n          this.type('bin');\n        }\n      } else {\n        return this.json(chunk);\n      }\n      break;\n  }\n  if (typeof chunk === 'string') {\n    encoding = 'utf8';\n    type = this.get('Content-Type');\n    if (typeof type === 'string') {\n      this.set('Content-Type', setCharset(type, 'utf-8'));\n    }\n  }\n  var etagFn = app.get('etag fn');\n  var generateETag = !this.get('ETag') && typeof etagFn === 'function';\n  var len;\n  if (chunk !== undefined) {\n    if (Buffer.isBuffer(chunk)) {\n      len = chunk.length;\n    } else if (!generateETag && chunk.length < 1000) {\n      len = Buffer.byteLength(chunk, encoding);\n    } else {\n      chunk = Buffer.from(chunk, encoding);\n      encoding = undefined;\n      len = chunk.length;\n    }\n    this.set('Content-Length', len);\n  }\n  var etag;\n  if (generateETag && len !== undefined) {\n    if (etag = etagFn(chunk, encoding)) {\n      this.set('ETag', etag);\n    }\n  }\n  if (req.fresh) this.statusCode = 304;\n  if (204 === this.statusCode || 304 === this.statusCode) {\n    this.removeHeader('Content-Type');\n    this.removeHeader('Content-Length');\n    this.removeHeader('Transfer-Encoding');\n    chunk = '';\n  }\n  if (req.method === 'HEAD') {\n    this.end();\n  } else {\n    this.end(chunk, encoding);\n  }\n  return this;\n};\nres.json = function json(obj) {\n  var val = obj;\n  if (arguments.length === 2) {\n    if (typeof arguments[1] === 'number') {\n      deprecate('res.json(obj, status): Use res.status(status).json(obj) instead');\n      this.statusCode = arguments[1];\n    } else {\n      deprecate('res.json(status, obj): Use res.status(status).json(obj) instead');\n      this.statusCode = arguments[0];\n      val = arguments[1];\n    }\n  }\n  var app = this.app;\n  var escape = app.get('json escape');\n  var replacer = app.get('json replacer');\n  var spaces = app.get('json spaces');\n  var body = stringify(val, replacer, spaces, escape);\n  if (!this.get('Content-Type')) {\n    this.set('Content-Type', 'application/json');\n  }\n  return this.send(body);\n};\nres.jsonp = function jsonp(obj) {\n  var val = obj;\n  if (arguments.length === 2) {\n    if (typeof arguments[1] === 'number') {\n      deprecate('res.jsonp(obj, status): Use res.status(status).jsonp(obj) instead');\n      this.statusCode = arguments[1];\n    } else {\n      deprecate('res.jsonp(status, obj): Use res.status(status).jsonp(obj) instead');\n      this.statusCode = arguments[0];\n      val = arguments[1];\n    }\n  }\n  var app = this.app;\n  var escape = app.get('json escape');\n  var replacer = app.get('json replacer');\n  var spaces = app.get('json spaces');\n  var body = stringify(val, replacer, spaces, escape);\n  var callback = this.req.query[app.get('jsonp callback name')];\n  if (!this.get('Content-Type')) {\n    this.set('X-Content-Type-Options', 'nosniff');\n    this.set('Content-Type', 'application/json');\n  }\n  if (Array.isArray(callback)) {\n    callback = callback[0];\n  }\n  if (typeof callback === 'string' && callback.length !== 0) {\n    this.set('X-Content-Type-Options', 'nosniff');\n    this.set('Content-Type', 'text/javascript');\n    callback = callback.replace(/[^\\[\\]\\w$.]/g, '');\n    if (body === undefined) {\n      body = '';\n    } else if (typeof body === 'string') {\n      body = body.replace(/\\u2028/g, '\\\\u2028').replace(/\\u2029/g, '\\\\u2029');\n    }\n    body = '/**/ typeof ' + callback + ' === \\'function\\' && ' + callback + '(' + body + ');';\n  }\n  return this.send(body);\n};\nres.sendStatus = function sendStatus(statusCode) {\n  var body = statuses[statusCode] || String(statusCode);\n  this.statusCode = statusCode;\n  this.type('txt');\n  return this.send(body);\n};\nres.sendFile = function sendFile(path, options, callback) {\n  var done = callback;\n  var req = this.req;\n  var res = this;\n  var next = req.next;\n  var opts = options || ({});\n  if (!path) {\n    throw new TypeError('path argument is required to res.sendFile');\n  }\n  if (typeof path !== 'string') {\n    throw new TypeError('path must be a string to res.sendFile');\n  }\n  if (typeof options === 'function') {\n    done = options;\n    opts = {};\n  }\n  if (!opts.root && !isAbsolute(path)) {\n    throw new TypeError('path must be absolute or specify root to res.sendFile');\n  }\n  var pathname = encodeURI(path);\n  var file = send(req, pathname, opts);\n  sendfile(res, file, opts, function (err) {\n    if (done) return done(err);\n    if (err && err.code === 'EISDIR') return next();\n    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {\n      next(err);\n    }\n  });\n};\nres.sendfile = function (path, options, callback) {\n  var done = callback;\n  var req = this.req;\n  var res = this;\n  var next = req.next;\n  var opts = options || ({});\n  if (typeof options === 'function') {\n    done = options;\n    opts = {};\n  }\n  var file = send(req, path, opts);\n  sendfile(res, file, opts, function (err) {\n    if (done) return done(err);\n    if (err && err.code === 'EISDIR') return next();\n    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {\n      next(err);\n    }\n  });\n};\nres.sendfile = deprecate.function(res.sendfile, 'res.sendfile: Use res.sendFile instead');\nres.download = function download(path, filename, options, callback) {\n  var done = callback;\n  var name = filename;\n  var opts = options || null;\n  if (typeof filename === 'function') {\n    done = filename;\n    name = null;\n    opts = null;\n  } else if (typeof options === 'function') {\n    done = options;\n    opts = null;\n  }\n  var headers = {\n    'Content-Disposition': contentDisposition(name || path)\n  };\n  if (opts && opts.headers) {\n    var keys = Object.keys(opts.headers);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      if (key.toLowerCase() !== 'content-disposition') {\n        headers[key] = opts.headers[key];\n      }\n    }\n  }\n  opts = Object.create(opts);\n  opts.headers = headers;\n  var fullPath = resolve(path);\n  return this.sendFile(fullPath, opts, done);\n};\nres.contentType = res.type = function contentType(type) {\n  var ct = type.indexOf('/') === -1 ? mime.lookup(type) : type;\n  return this.set('Content-Type', ct);\n};\nres.format = function (obj) {\n  var req = this.req;\n  var next = req.next;\n  var fn = obj.default;\n  if (fn) delete obj.default;\n  var keys = Object.keys(obj);\n  var key = keys.length > 0 ? req.accepts(keys) : false;\n  this.vary(\"Accept\");\n  if (key) {\n    this.set('Content-Type', normalizeType(key).value);\n    obj[key](req, this, next);\n  } else if (fn) {\n    fn();\n  } else {\n    var err = new Error('Not Acceptable');\n    err.status = err.statusCode = 406;\n    err.types = normalizeTypes(keys).map(function (o) {\n      return o.value;\n    });\n    next(err);\n  }\n  return this;\n};\nres.attachment = function attachment(filename) {\n  if (filename) {\n    this.type(extname(filename));\n  }\n  this.set('Content-Disposition', contentDisposition(filename));\n  return this;\n};\nres.append = function append(field, val) {\n  var prev = this.get(field);\n  var value = val;\n  if (prev) {\n    value = Array.isArray(prev) ? prev.concat(val) : Array.isArray(val) ? [prev].concat(val) : [prev, val];\n  }\n  return this.set(field, value);\n};\nres.set = res.header = function header(field, val) {\n  if (arguments.length === 2) {\n    var value = Array.isArray(val) ? val.map(String) : String(val);\n    if (field.toLowerCase() === 'content-type') {\n      if (Array.isArray(value)) {\n        throw new TypeError('Content-Type cannot be set to an Array');\n      }\n      if (!charsetRegExp.test(value)) {\n        var charset = mime.charsets.lookup(value.split(';')[0]);\n        if (charset) value += '; charset=' + charset.toLowerCase();\n      }\n    }\n    this.setHeader(field, value);\n  } else {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n  }\n  return this;\n};\nres.get = function (field) {\n  return this.getHeader(field);\n};\nres.clearCookie = function clearCookie(name, options) {\n  var opts = merge({\n    expires: new Date(1),\n    path: '/'\n  }, options);\n  return this.cookie(name, '', opts);\n};\nres.cookie = function (name, value, options) {\n  var opts = merge({}, options);\n  var secret = this.req.secret;\n  var signed = opts.signed;\n  if (signed && !secret) {\n    throw new Error('cookieParser(\"secret\") required for signed cookies');\n  }\n  var val = typeof value === 'object' ? 'j:' + JSON.stringify(value) : String(value);\n  if (signed) {\n    val = 's:' + sign(val, secret);\n  }\n  if (('maxAge' in opts)) {\n    opts.expires = new Date(Date.now() + opts.maxAge);\n    opts.maxAge /= 1000;\n  }\n  if (opts.path == null) {\n    opts.path = '/';\n  }\n  this.append('Set-Cookie', cookie.serialize(name, String(val), opts));\n  return this;\n};\nres.location = function location(url) {\n  var loc = url;\n  if (url === 'back') {\n    loc = this.req.get('Referrer') || '/';\n  }\n  return this.set('Location', encodeUrl(loc));\n};\nres.redirect = function redirect(url) {\n  var address = url;\n  var body;\n  var status = 302;\n  if (arguments.length === 2) {\n    if (typeof arguments[0] === 'number') {\n      status = arguments[0];\n      address = arguments[1];\n    } else {\n      deprecate('res.redirect(url, status): Use res.redirect(status, url) instead');\n      status = arguments[1];\n    }\n  }\n  address = this.location(address).get('Location');\n  this.format({\n    text: function () {\n      body = statuses[status] + '. Redirecting to ' + address;\n    },\n    html: function () {\n      var u = escapeHtml(address);\n      body = '<p>' + statuses[status] + '. Redirecting to <a href=\"' + u + '\">' + u + '</a></p>';\n    },\n    default: function () {\n      body = '';\n    }\n  });\n  this.statusCode = status;\n  this.set('Content-Length', Buffer.byteLength(body));\n  if (this.req.method === 'HEAD') {\n    this.end();\n  } else {\n    this.end(body);\n  }\n};\nres.vary = function (field) {\n  if (!field || Array.isArray(field) && !field.length) {\n    deprecate('res.vary(): Provide a field name');\n    return this;\n  }\n  vary(this, field);\n  return this;\n};\nres.render = function render(view, options, callback) {\n  var app = this.req.app;\n  var done = callback;\n  var opts = options || ({});\n  var req = this.req;\n  var self = this;\n  if (typeof options === 'function') {\n    done = options;\n    opts = {};\n  }\n  opts._locals = self.locals;\n  done = done || (function (err, str) {\n    if (err) return req.next(err);\n    self.send(str);\n  });\n  app.render(view, opts, done);\n};\nfunction sendfile(res, file, options, callback) {\n  var done = false;\n  var streaming;\n  function onaborted() {\n    if (done) return;\n    done = true;\n    var err = new Error('Request aborted');\n    err.code = 'ECONNABORTED';\n    callback(err);\n  }\n  function ondirectory() {\n    if (done) return;\n    done = true;\n    var err = new Error('EISDIR, read');\n    err.code = 'EISDIR';\n    callback(err);\n  }\n  function onerror(err) {\n    if (done) return;\n    done = true;\n    callback(err);\n  }\n  function onend() {\n    if (done) return;\n    done = true;\n    callback();\n  }\n  function onfile() {\n    streaming = false;\n  }\n  function onfinish(err) {\n    if (err && err.code === 'ECONNRESET') return onaborted();\n    if (err) return onerror(err);\n    if (done) return;\n    setImmediate(function () {\n      if (streaming !== false && !done) {\n        onaborted();\n        return;\n      }\n      if (done) return;\n      done = true;\n      callback();\n    });\n  }\n  function onstream() {\n    streaming = true;\n  }\n  file.on('directory', ondirectory);\n  file.on('end', onend);\n  file.on('error', onerror);\n  file.on('file', onfile);\n  file.on('stream', onstream);\n  onFinished(res, onfinish);\n  if (options.headers) {\n    file.on('headers', function headers(res) {\n      var obj = options.headers;\n      var keys = Object.keys(obj);\n      for (var i = 0; i < keys.length; i++) {\n        var k = keys[i];\n        res.setHeader(k, obj[k]);\n      }\n    });\n  }\n  file.pipe(res);\n}\nfunction stringify(value, replacer, spaces, escape) {\n  var json = replacer || spaces ? JSON.stringify(value, replacer, spaces) : JSON.stringify(value);\n  if (escape && typeof json === 'string') {\n    json = json.replace(/[<>&]/g, function (c) {\n      switch (c.charCodeAt(0)) {\n        case 0x3c:\n          return '\\\\u003c';\n        case 0x3e:\n          return '\\\\u003e';\n        case 0x26:\n          return '\\\\u0026';\n        default:\n          return c;\n      }\n    });\n  }\n  return json;\n}\n"}