{"contents":"'use strict';\nvar accepts = __fusereq(32);\nvar deprecate = __fusereq(15)('express');\nvar isIP = __fusereq(33).isIP;\nvar typeis = __fusereq(34);\nvar http = __fusereq(25);\nvar fresh = __fusereq(35);\nvar parseRange = __fusereq(36);\nvar parse = __fusereq(37);\nvar proxyaddr = __fusereq(38);\nvar req = Object.create(http.IncomingMessage.prototype);\nmodule.exports = req;\nreq.get = req.header = function header(name) {\n  if (!name) {\n    throw new TypeError('name argument is required to req.get');\n  }\n  if (typeof name !== 'string') {\n    throw new TypeError('name must be a string to req.get');\n  }\n  var lc = name.toLowerCase();\n  switch (lc) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer || this.headers.referer;\n    default:\n      return this.headers[lc];\n  }\n};\nreq.accepts = function () {\n  var accept = accepts(this);\n  return accept.types.apply(accept, arguments);\n};\nreq.acceptsEncodings = function () {\n  var accept = accepts(this);\n  return accept.encodings.apply(accept, arguments);\n};\nreq.acceptsEncoding = deprecate.function(req.acceptsEncodings, 'req.acceptsEncoding: Use acceptsEncodings instead');\nreq.acceptsCharsets = function () {\n  var accept = accepts(this);\n  return accept.charsets.apply(accept, arguments);\n};\nreq.acceptsCharset = deprecate.function(req.acceptsCharsets, 'req.acceptsCharset: Use acceptsCharsets instead');\nreq.acceptsLanguages = function () {\n  var accept = accepts(this);\n  return accept.languages.apply(accept, arguments);\n};\nreq.acceptsLanguage = deprecate.function(req.acceptsLanguages, 'req.acceptsLanguage: Use acceptsLanguages instead');\nreq.range = function range(size, options) {\n  var range = this.get('Range');\n  if (!range) return;\n  return parseRange(size, range, options);\n};\nreq.param = function param(name, defaultValue) {\n  var params = this.params || ({});\n  var body = this.body || ({});\n  var query = this.query || ({});\n  var args = arguments.length === 1 ? 'name' : 'name, default';\n  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');\n  if (null != params[name] && params.hasOwnProperty(name)) return params[name];\n  if (null != body[name]) return body[name];\n  if (null != query[name]) return query[name];\n  return defaultValue;\n};\nreq.is = function is(types) {\n  var arr = types;\n  if (!Array.isArray(types)) {\n    arr = new Array(arguments.length);\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = arguments[i];\n    }\n  }\n  return typeis(this, arr);\n};\ndefineGetter(req, 'protocol', function protocol() {\n  var proto = this.connection.encrypted ? 'https' : 'http';\n  var trust = this.app.get('trust proxy fn');\n  if (!trust(this.connection.remoteAddress, 0)) {\n    return proto;\n  }\n  var header = this.get('X-Forwarded-Proto') || proto;\n  var index = header.indexOf(',');\n  return index !== -1 ? header.substring(0, index).trim() : header.trim();\n});\ndefineGetter(req, 'secure', function secure() {\n  return this.protocol === 'https';\n});\ndefineGetter(req, 'ip', function ip() {\n  var trust = this.app.get('trust proxy fn');\n  return proxyaddr(this, trust);\n});\ndefineGetter(req, 'ips', function ips() {\n  var trust = this.app.get('trust proxy fn');\n  var addrs = proxyaddr.all(this, trust);\n  addrs.reverse().pop();\n  return addrs;\n});\ndefineGetter(req, 'subdomains', function subdomains() {\n  var hostname = this.hostname;\n  if (!hostname) return [];\n  var offset = this.app.get('subdomain offset');\n  var subdomains = !isIP(hostname) ? hostname.split('.').reverse() : [hostname];\n  return subdomains.slice(offset);\n});\ndefineGetter(req, 'path', function path() {\n  return parse(this).pathname;\n});\ndefineGetter(req, 'hostname', function hostname() {\n  var trust = this.app.get('trust proxy fn');\n  var host = this.get('X-Forwarded-Host');\n  if (!host || !trust(this.connection.remoteAddress, 0)) {\n    host = this.get('Host');\n  } else if (host.indexOf(',') !== -1) {\n    host = host.substring(0, host.indexOf(',')).trimRight();\n  }\n  if (!host) return;\n  var offset = host[0] === '[' ? host.indexOf(']') + 1 : 0;\n  var index = host.indexOf(':', offset);\n  return index !== -1 ? host.substring(0, index) : host;\n});\ndefineGetter(req, 'host', deprecate.function(function host() {\n  return this.hostname;\n}, 'req.host: Use req.hostname instead'));\ndefineGetter(req, 'fresh', function () {\n  var method = this.method;\n  var res = this.res;\n  var status = res.statusCode;\n  if ('GET' !== method && 'HEAD' !== method) return false;\n  if (status >= 200 && status < 300 || 304 === status) {\n    return fresh(this.headers, {\n      'etag': res.get('ETag'),\n      'last-modified': res.get('Last-Modified')\n    });\n  }\n  return false;\n});\ndefineGetter(req, 'stale', function stale() {\n  return !this.fresh;\n});\ndefineGetter(req, 'xhr', function xhr() {\n  var val = this.get('X-Requested-With') || '';\n  return val.toLowerCase() === 'xmlhttprequest';\n});\nfunction defineGetter(obj, name, getter) {\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: true,\n    get: getter\n  });\n}\n"}