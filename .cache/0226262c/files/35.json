{"contents":"'use strict';\nvar CACHE_CONTROL_NO_CACHE_REGEXP = /(?:^|,)\\s*?no-cache\\s*?(?:,|$)/;\nmodule.exports = fresh;\nfunction fresh(reqHeaders, resHeaders) {\n  var modifiedSince = reqHeaders['if-modified-since'];\n  var noneMatch = reqHeaders['if-none-match'];\n  if (!modifiedSince && !noneMatch) {\n    return false;\n  }\n  var cacheControl = reqHeaders['cache-control'];\n  if (cacheControl && CACHE_CONTROL_NO_CACHE_REGEXP.test(cacheControl)) {\n    return false;\n  }\n  if (noneMatch && noneMatch !== '*') {\n    var etag = resHeaders['etag'];\n    if (!etag) {\n      return false;\n    }\n    var etagStale = true;\n    var matches = parseTokenList(noneMatch);\n    for (var i = 0; i < matches.length; i++) {\n      var match = matches[i];\n      if (match === etag || match === 'W/' + etag || 'W/' + match === etag) {\n        etagStale = false;\n        break;\n      }\n    }\n    if (etagStale) {\n      return false;\n    }\n  }\n  if (modifiedSince) {\n    var lastModified = resHeaders['last-modified'];\n    var modifiedStale = !lastModified || !(parseHttpDate(lastModified) <= parseHttpDate(modifiedSince));\n    if (modifiedStale) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction parseHttpDate(date) {\n  var timestamp = date && Date.parse(date);\n  return typeof timestamp === 'number' ? timestamp : NaN;\n}\nfunction parseTokenList(str) {\n  var end = 0;\n  var list = [];\n  var start = 0;\n  for (var i = 0, len = str.length; i < len; i++) {\n    switch (str.charCodeAt(i)) {\n      case 0x20:\n        if (start === end) {\n          start = end = i + 1;\n        }\n        break;\n      case 0x2c:\n        list.push(str.substring(start, end));\n        start = end = i + 1;\n        break;\n      default:\n        end = i + 1;\n        break;\n    }\n  }\n  list.push(str.substring(start, end));\n  return list;\n}\n"}