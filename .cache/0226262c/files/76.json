{"contents":"var path = __fusereq(29);\nvar fs = __fusereq(60);\nfunction Mime() {\n  this.types = Object.create(null);\n  this.extensions = Object.create(null);\n}\nMime.prototype.define = function (map) {\n  for (var type in map) {\n    var exts = map[type];\n    for (var i = 0; i < exts.length; i++) {\n      if (undefined && this.types[exts[i]]) {\n        console.warn((this._loading || \"define()\").replace(/.*\\//, ''), 'changes \"' + exts[i] + '\" extension type from ' + this.types[exts[i]] + ' to ' + type);\n      }\n      this.types[exts[i]] = type;\n    }\n    if (!this.extensions[type]) {\n      this.extensions[type] = exts[0];\n    }\n  }\n};\nMime.prototype.load = function (file) {\n  this._loading = file;\n  var map = {}, content = fs.readFileSync(file, 'ascii'), lines = content.split(/[\\r\\n]+/);\n  lines.forEach(function (line) {\n    var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n    map[fields.shift()] = fields;\n  });\n  this.define(map);\n  this._loading = null;\n};\nMime.prototype.lookup = function (path, fallback) {\n  var ext = path.replace(/^.*[\\.\\/\\\\]/, '').toLowerCase();\n  return this.types[ext] || fallback || this.default_type;\n};\nMime.prototype.extension = function (mimeType) {\n  var type = mimeType.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)[1].toLowerCase();\n  return this.extensions[type];\n};\nvar mime = new Mime();\nmime.define(__fusereq(95));\nmime.default_type = mime.lookup('bin');\nmime.Mime = Mime;\nmime.charsets = {\n  lookup: function (mimeType, fallback) {\n    return (/^text\\/|^application\\/(javascript|json)/).test(mimeType) ? 'UTF-8' : fallback;\n  }\n};\nmodule.exports = mime;\n"}