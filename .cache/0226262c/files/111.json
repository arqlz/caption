{"contents":"\"use strict\";\nvar Buffer = __fusereq(98).Buffer;\nmodule.exports = {\n  utf8: {\n    type: \"_internal\",\n    bomAware: true\n  },\n  cesu8: {\n    type: \"_internal\",\n    bomAware: true\n  },\n  unicode11utf8: \"utf8\",\n  ucs2: {\n    type: \"_internal\",\n    bomAware: true\n  },\n  utf16le: \"ucs2\",\n  binary: {\n    type: \"_internal\"\n  },\n  base64: {\n    type: \"_internal\"\n  },\n  hex: {\n    type: \"_internal\"\n  },\n  _internal: InternalCodec\n};\nfunction InternalCodec(codecOptions, iconv) {\n  this.enc = codecOptions.encodingName;\n  this.bomAware = codecOptions.bomAware;\n  if (this.enc === \"base64\") this.encoder = InternalEncoderBase64; else if (this.enc === \"cesu8\") {\n    this.enc = \"utf8\";\n    this.encoder = InternalEncoderCesu8;\n    if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== 'ðŸ’©') {\n      this.decoder = InternalDecoderCesu8;\n      this.defaultCharUnicode = iconv.defaultCharUnicode;\n    }\n  }\n}\nInternalCodec.prototype.encoder = InternalEncoder;\nInternalCodec.prototype.decoder = InternalDecoder;\nvar StringDecoder = __fusereq(124).StringDecoder;\nif (!StringDecoder.prototype.end) StringDecoder.prototype.end = function () {};\nfunction InternalDecoder(options, codec) {\n  StringDecoder.call(this, codec.enc);\n}\nInternalDecoder.prototype = StringDecoder.prototype;\nfunction InternalEncoder(options, codec) {\n  this.enc = codec.enc;\n}\nInternalEncoder.prototype.write = function (str) {\n  return Buffer.from(str, this.enc);\n};\nInternalEncoder.prototype.end = function () {};\nfunction InternalEncoderBase64(options, codec) {\n  this.prevStr = '';\n}\nInternalEncoderBase64.prototype.write = function (str) {\n  str = this.prevStr + str;\n  var completeQuads = str.length - str.length % 4;\n  this.prevStr = str.slice(completeQuads);\n  str = str.slice(0, completeQuads);\n  return Buffer.from(str, \"base64\");\n};\nInternalEncoderBase64.prototype.end = function () {\n  return Buffer.from(this.prevStr, \"base64\");\n};\nfunction InternalEncoderCesu8(options, codec) {}\nInternalEncoderCesu8.prototype.write = function (str) {\n  var buf = Buffer.alloc(str.length * 3), bufIdx = 0;\n  for (var i = 0; i < str.length; i++) {\n    var charCode = str.charCodeAt(i);\n    if (charCode < 0x80) buf[bufIdx++] = charCode; else if (charCode < 0x800) {\n      buf[bufIdx++] = 0xC0 + (charCode >>> 6);\n      buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n    } else {\n      buf[bufIdx++] = 0xE0 + (charCode >>> 12);\n      buf[bufIdx++] = 0x80 + (charCode >>> 6 & 0x3f);\n      buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n    }\n  }\n  return buf.slice(0, bufIdx);\n};\nInternalEncoderCesu8.prototype.end = function () {};\nfunction InternalDecoderCesu8(options, codec) {\n  this.acc = 0;\n  this.contBytes = 0;\n  this.accBytes = 0;\n  this.defaultCharUnicode = codec.defaultCharUnicode;\n}\nInternalDecoderCesu8.prototype.write = function (buf) {\n  var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, res = '';\n  for (var i = 0; i < buf.length; i++) {\n    var curByte = buf[i];\n    if ((curByte & 0xC0) !== 0x80) {\n      if (contBytes > 0) {\n        res += this.defaultCharUnicode;\n        contBytes = 0;\n      }\n      if (curByte < 0x80) {\n        res += String.fromCharCode(curByte);\n      } else if (curByte < 0xE0) {\n        acc = curByte & 0x1F;\n        contBytes = 1;\n        accBytes = 1;\n      } else if (curByte < 0xF0) {\n        acc = curByte & 0x0F;\n        contBytes = 2;\n        accBytes = 1;\n      } else {\n        res += this.defaultCharUnicode;\n      }\n    } else {\n      if (contBytes > 0) {\n        acc = acc << 6 | curByte & 0x3f;\n        contBytes--;\n        accBytes++;\n        if (contBytes === 0) {\n          if (accBytes === 2 && acc < 0x80 && acc > 0) res += this.defaultCharUnicode; else if (accBytes === 3 && acc < 0x800) res += this.defaultCharUnicode; else res += String.fromCharCode(acc);\n        }\n      } else {\n        res += this.defaultCharUnicode;\n      }\n    }\n  }\n  this.acc = acc;\n  this.contBytes = contBytes;\n  this.accBytes = accBytes;\n  return res;\n};\nInternalDecoderCesu8.prototype.end = function () {\n  var res = 0;\n  if (this.contBytes > 0) res += this.defaultCharUnicode;\n  return res;\n};\n"}