{"contents":"var process = __fusereq(59);\n\"use strict\";\nvar Buffer = __fusereq(98).Buffer;\nvar bomHandling = __fusereq(99), iconv = module.exports;\niconv.encodings = null;\niconv.defaultCharUnicode = '�';\niconv.defaultCharSingleByte = '?';\niconv.encode = function encode(str, encoding, options) {\n  str = \"\" + (str || \"\");\n  var encoder = iconv.getEncoder(encoding, options);\n  var res = encoder.write(str);\n  var trail = encoder.end();\n  return trail && trail.length > 0 ? Buffer.concat([res, trail]) : res;\n};\niconv.decode = function decode(buf, encoding, options) {\n  if (typeof buf === 'string') {\n    if (!iconv.skipDecodeWarning) {\n      console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n      iconv.skipDecodeWarning = true;\n    }\n    buf = Buffer.from(\"\" + (buf || \"\"), \"binary\");\n  }\n  var decoder = iconv.getDecoder(encoding, options);\n  var res = decoder.write(buf);\n  var trail = decoder.end();\n  return trail ? res + trail : res;\n};\niconv.encodingExists = function encodingExists(enc) {\n  try {\n    iconv.getCodec(enc);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n  if (!iconv.encodings) iconv.encodings = __fusereq(100);\n  var enc = iconv._canonicalizeEncoding(encoding);\n  var codecOptions = {};\n  while (true) {\n    var codec = iconv._codecDataCache[enc];\n    if (codec) return codec;\n    var codecDef = iconv.encodings[enc];\n    switch (typeof codecDef) {\n      case \"string\":\n        enc = codecDef;\n        break;\n      case \"object\":\n        for (var key in codecDef) codecOptions[key] = codecDef[key];\n        if (!codecOptions.encodingName) codecOptions.encodingName = enc;\n        enc = codecDef.type;\n        break;\n      case \"function\":\n        if (!codecOptions.encodingName) codecOptions.encodingName = enc;\n        codec = new codecDef(codecOptions, iconv);\n        iconv._codecDataCache[codecOptions.encodingName] = codec;\n        return codec;\n      default:\n        throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\" + enc + \"')\");\n    }\n  }\n};\niconv._canonicalizeEncoding = function (encoding) {\n  return ('' + encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, \"\");\n};\niconv.getEncoder = function getEncoder(encoding, options) {\n  var codec = iconv.getCodec(encoding), encoder = new codec.encoder(options, codec);\n  if (codec.bomAware && options && options.addBOM) encoder = new bomHandling.PrependBOM(encoder, options);\n  return encoder;\n};\niconv.getDecoder = function getDecoder(encoding, options) {\n  var codec = iconv.getCodec(encoding), decoder = new codec.decoder(options, codec);\n  if (codec.bomAware && !(options && options.stripBOM === false)) decoder = new bomHandling.StripBOM(decoder, options);\n  return decoder;\n};\nvar nodeVer = typeof process !== 'undefined' && ({}) && ({}).node;\nif (nodeVer) {\n  var nodeVerArr = nodeVer.split(\".\").map(Number);\n  if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n    __fusereq(101)(iconv);\n  }\n  __fusereq(102)(iconv);\n}\nif (\"Ā\" != \"\\u0100\") {\n  console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n"}