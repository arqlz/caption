{"contents":"'use strict';\nvar typer = __fusereq(65);\nvar mime = __fusereq(64);\nmodule.exports = typeofrequest;\nmodule.exports.is = typeis;\nmodule.exports.hasBody = hasbody;\nmodule.exports.normalize = normalize;\nmodule.exports.match = mimeMatch;\nfunction typeis(value, types_) {\n  var i;\n  var types = types_;\n  var val = tryNormalizeType(value);\n  if (!val) {\n    return false;\n  }\n  if (types && !Array.isArray(types)) {\n    types = new Array(arguments.length - 1);\n    for (i = 0; i < types.length; i++) {\n      types[i] = arguments[i + 1];\n    }\n  }\n  if (!types || !types.length) {\n    return val;\n  }\n  var type;\n  for (i = 0; i < types.length; i++) {\n    if (mimeMatch(normalize(type = types[i]), val)) {\n      return type[0] === '+' || type.indexOf('*') !== -1 ? val : type;\n    }\n  }\n  return false;\n}\nfunction hasbody(req) {\n  return req.headers['transfer-encoding'] !== undefined || !isNaN(req.headers['content-length']);\n}\nfunction typeofrequest(req, types_) {\n  var types = types_;\n  if (!hasbody(req)) {\n    return null;\n  }\n  if (arguments.length > 2) {\n    types = new Array(arguments.length - 1);\n    for (var i = 0; i < types.length; i++) {\n      types[i] = arguments[i + 1];\n    }\n  }\n  var value = req.headers['content-type'];\n  return typeis(value, types);\n}\nfunction normalize(type) {\n  if (typeof type !== 'string') {\n    return false;\n  }\n  switch (type) {\n    case 'urlencoded':\n      return 'application/x-www-form-urlencoded';\n    case 'multipart':\n      return 'multipart/*';\n  }\n  if (type[0] === '+') {\n    return '*/*' + type;\n  }\n  return type.indexOf('/') === -1 ? mime.lookup(type) : type;\n}\nfunction mimeMatch(expected, actual) {\n  if (expected === false) {\n    return false;\n  }\n  var actualParts = actual.split('/');\n  var expectedParts = expected.split('/');\n  if (actualParts.length !== 2 || expectedParts.length !== 2) {\n    return false;\n  }\n  if (expectedParts[0] !== '*' && expectedParts[0] !== actualParts[0]) {\n    return false;\n  }\n  if (expectedParts[1].substr(0, 2) === '*+') {\n    return expectedParts[1].length <= actualParts[1].length + 1 && expectedParts[1].substr(1) === actualParts[1].substr(1 - expectedParts[1].length);\n  }\n  if (expectedParts[1] !== '*' && expectedParts[1] !== actualParts[1]) {\n    return false;\n  }\n  return true;\n}\nfunction normalizeType(value) {\n  var type = typer.parse(value);\n  type.parameters = undefined;\n  return typer.format(type);\n}\nfunction tryNormalizeType(value) {\n  if (!value) {\n    return null;\n  }\n  try {\n    return normalizeType(value);\n  } catch (err) {\n    return null;\n  }\n}\n"}