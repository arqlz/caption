{"contents":"'use strict';\nmodule.exports = rangeParser;\nfunction rangeParser(size, str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n  var index = str.indexOf('=');\n  if (index === -1) {\n    return -2;\n  }\n  var arr = str.slice(index + 1).split(',');\n  var ranges = [];\n  ranges.type = str.slice(0, index);\n  for (var i = 0; i < arr.length; i++) {\n    var range = arr[i].split('-');\n    var start = parseInt(range[0], 10);\n    var end = parseInt(range[1], 10);\n    if (isNaN(start)) {\n      start = size - end;\n      end = size - 1;\n    } else if (isNaN(end)) {\n      end = size - 1;\n    }\n    if (end > size - 1) {\n      end = size - 1;\n    }\n    if (isNaN(start) || isNaN(end) || start > end || start < 0) {\n      continue;\n    }\n    ranges.push({\n      start: start,\n      end: end\n    });\n  }\n  if (ranges.length < 1) {\n    return -1;\n  }\n  return options && options.combine ? combineRanges(ranges) : ranges;\n}\nfunction combineRanges(ranges) {\n  var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart);\n  for (var j = 0, i = 1; i < ordered.length; i++) {\n    var range = ordered[i];\n    var current = ordered[j];\n    if (range.start > current.end + 1) {\n      ordered[++j] = range;\n    } else if (range.end > current.end) {\n      current.end = range.end;\n      current.index = Math.min(current.index, range.index);\n    }\n  }\n  ordered.length = j + 1;\n  var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex);\n  combined.type = ranges.type;\n  return combined;\n}\nfunction mapWithIndex(range, index) {\n  return {\n    start: range.start,\n    end: range.end,\n    index: index\n  };\n}\nfunction mapWithoutIndex(range) {\n  return {\n    start: range.start,\n    end: range.end\n  };\n}\nfunction sortByRangeIndex(a, b) {\n  return a.index - b.index;\n}\nfunction sortByRangeStart(a, b) {\n  return a.start - b.start;\n}\n"}