{"contents":"'use strict';\nvar finalhandler = __fusereq(20);\nvar Router = __fusereq(10);\nvar methods = __fusereq(21);\nvar middleware = __fusereq(22);\nvar query = __fusereq(13);\nvar debug = __fusereq(23)('express:application');\nvar View = __fusereq(148);\nvar http = __fusereq(25);\nvar compileETag = __fusereq(26).compileETag;\nvar compileQueryParser = __fusereq(26).compileQueryParser;\nvar compileTrust = __fusereq(26).compileTrust;\nvar deprecate = __fusereq(15)('express');\nvar flatten = __fusereq(27);\nvar merge = __fusereq(28);\nvar resolve = __fusereq(29).resolve;\nvar setPrototypeOf = __fusereq(30);\nvar slice = Array.prototype.slice;\nvar app = exports = module.exports = {};\nvar trustProxyDefaultSymbol = '@@symbol:trust_proxy_default';\napp.init = function init() {\n  this.cache = {};\n  this.engines = {};\n  this.settings = {};\n  this.defaultConfiguration();\n};\napp.defaultConfiguration = function defaultConfiguration() {\n  var env = \"development\" || 'development';\n  this.enable('x-powered-by');\n  this.set('etag', 'weak');\n  this.set('env', env);\n  this.set('query parser', 'extended');\n  this.set('subdomain offset', 2);\n  this.set('trust proxy', false);\n  Object.defineProperty(this.settings, trustProxyDefaultSymbol, {\n    configurable: true,\n    value: true\n  });\n  debug('booting in %s mode', env);\n  this.on('mount', function onmount(parent) {\n    if (this.settings[trustProxyDefaultSymbol] === true && typeof parent.settings['trust proxy fn'] === 'function') {\n      delete this.settings['trust proxy'];\n      delete this.settings['trust proxy fn'];\n    }\n    setPrototypeOf(this.request, parent.request);\n    setPrototypeOf(this.response, parent.response);\n    setPrototypeOf(this.engines, parent.engines);\n    setPrototypeOf(this.settings, parent.settings);\n  });\n  this.locals = Object.create(null);\n  this.mountpath = '/';\n  this.locals.settings = this.settings;\n  this.set('view', View);\n  this.set('views', resolve('views'));\n  this.set('jsonp callback name', 'callback');\n  if (env === 'production') {\n    this.enable('view cache');\n  }\n  Object.defineProperty(this, 'router', {\n    get: function () {\n      throw new Error('\\'app.router\\' is deprecated!\\nPlease see the 3.x to 4.x migration guide for details on how to update your app.');\n    }\n  });\n};\napp.lazyrouter = function lazyrouter() {\n  if (!this._router) {\n    this._router = new Router({\n      caseSensitive: this.enabled('case sensitive routing'),\n      strict: this.enabled('strict routing')\n    });\n    this._router.use(query(this.get('query parser fn')));\n    this._router.use(middleware.init(this));\n  }\n};\napp.handle = function handle(req, res, callback) {\n  var router = this._router;\n  var done = callback || finalhandler(req, res, {\n    env: this.get('env'),\n    onerror: logerror.bind(this)\n  });\n  if (!router) {\n    debug('no routes defined on app');\n    done();\n    return;\n  }\n  router.handle(req, res, done);\n};\napp.use = function use(fn) {\n  var offset = 0;\n  var path = '/';\n  if (typeof fn !== 'function') {\n    var arg = fn;\n    while (Array.isArray(arg) && arg.length !== 0) {\n      arg = arg[0];\n    }\n    if (typeof arg !== 'function') {\n      offset = 1;\n      path = fn;\n    }\n  }\n  var fns = flatten(slice.call(arguments, offset));\n  if (fns.length === 0) {\n    throw new TypeError('app.use() requires a middleware function');\n  }\n  this.lazyrouter();\n  var router = this._router;\n  fns.forEach(function (fn) {\n    if (!fn || !fn.handle || !fn.set) {\n      return router.use(path, fn);\n    }\n    debug('.use app under %s', path);\n    fn.mountpath = path;\n    fn.parent = this;\n    router.use(path, function mounted_app(req, res, next) {\n      var orig = req.app;\n      fn.handle(req, res, function (err) {\n        setPrototypeOf(req, orig.request);\n        setPrototypeOf(res, orig.response);\n        next(err);\n      });\n    });\n    fn.emit('mount', this);\n  }, this);\n  return this;\n};\napp.route = function route(path) {\n  this.lazyrouter();\n  return this._router.route(path);\n};\napp.engine = function engine(ext, fn) {\n  if (typeof fn !== 'function') {\n    throw new Error('callback function required');\n  }\n  var extension = ext[0] !== '.' ? '.' + ext : ext;\n  this.engines[extension] = fn;\n  return this;\n};\napp.param = function param(name, fn) {\n  this.lazyrouter();\n  if (Array.isArray(name)) {\n    for (var i = 0; i < name.length; i++) {\n      this.param(name[i], fn);\n    }\n    return this;\n  }\n  this._router.param(name, fn);\n  return this;\n};\napp.set = function set(setting, val) {\n  if (arguments.length === 1) {\n    return this.settings[setting];\n  }\n  debug('set \"%s\" to %o', setting, val);\n  this.settings[setting] = val;\n  switch (setting) {\n    case 'etag':\n      this.set('etag fn', compileETag(val));\n      break;\n    case 'query parser':\n      this.set('query parser fn', compileQueryParser(val));\n      break;\n    case 'trust proxy':\n      this.set('trust proxy fn', compileTrust(val));\n      Object.defineProperty(this.settings, trustProxyDefaultSymbol, {\n        configurable: true,\n        value: false\n      });\n      break;\n  }\n  return this;\n};\napp.path = function path() {\n  return this.parent ? this.parent.path() + this.mountpath : '';\n};\napp.enabled = function enabled(setting) {\n  return Boolean(this.set(setting));\n};\napp.disabled = function disabled(setting) {\n  return !this.set(setting);\n};\napp.enable = function enable(setting) {\n  return this.set(setting, true);\n};\napp.disable = function disable(setting) {\n  return this.set(setting, false);\n};\nmethods.forEach(function (method) {\n  app[method] = function (path) {\n    if (method === 'get' && arguments.length === 1) {\n      return this.set(path);\n    }\n    this.lazyrouter();\n    var route = this._router.route(path);\n    route[method].apply(route, slice.call(arguments, 1));\n    return this;\n  };\n});\napp.all = function all(path) {\n  this.lazyrouter();\n  var route = this._router.route(path);\n  var args = slice.call(arguments, 1);\n  for (var i = 0; i < methods.length; i++) {\n    route[methods[i]].apply(route, args);\n  }\n  return this;\n};\napp.del = deprecate.function(app.delete, 'app.del: Use app.delete instead');\napp.render = function render(name, options, callback) {\n  var cache = this.cache;\n  var done = callback;\n  var engines = this.engines;\n  var opts = options;\n  var renderOptions = {};\n  var view;\n  if (typeof options === 'function') {\n    done = options;\n    opts = {};\n  }\n  merge(renderOptions, this.locals);\n  if (opts._locals) {\n    merge(renderOptions, opts._locals);\n  }\n  merge(renderOptions, opts);\n  if (renderOptions.cache == null) {\n    renderOptions.cache = this.enabled('view cache');\n  }\n  if (renderOptions.cache) {\n    view = cache[name];\n  }\n  if (!view) {\n    var View = this.get('view');\n    view = new View(name, {\n      defaultEngine: this.get('view engine'),\n      root: this.get('views'),\n      engines: engines\n    });\n    if (!view.path) {\n      var dirs = Array.isArray(view.root) && view.root.length > 1 ? 'directories \"' + view.root.slice(0, -1).join('\", \"') + '\" or \"' + view.root[view.root.length - 1] + '\"' : 'directory \"' + view.root + '\"';\n      var err = new Error('Failed to lookup view \"' + name + '\" in views ' + dirs);\n      err.view = view;\n      return done(err);\n    }\n    if (renderOptions.cache) {\n      cache[name] = view;\n    }\n  }\n  tryRender(view, renderOptions, done);\n};\napp.listen = function listen() {\n  var server = http.createServer(this);\n  return server.listen.apply(server, arguments);\n};\nfunction logerror(err) {\n  if (this.get('env') !== 'test') console.error(err.stack || err.toString());\n}\nfunction tryRender(view, options, callback) {\n  try {\n    view.render(options, callback);\n  } catch (err) {\n    callback(err);\n  }\n}\n"}