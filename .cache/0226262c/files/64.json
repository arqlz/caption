{"contents":"'use strict';\nvar db = __fusereq(92);\nvar extname = __fusereq(29).extname;\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/;\nvar TEXT_TYPE_REGEXP = /^text\\//i;\nexports.charset = charset;\nexports.charsets = {\n  lookup: charset\n};\nexports.contentType = contentType;\nexports.extension = extension;\nexports.extensions = Object.create(null);\nexports.lookup = lookup;\nexports.types = Object.create(null);\npopulateMaps(exports.extensions, exports.types);\nfunction charset(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  }\n  var match = EXTRACT_TYPE_REGEXP.exec(type);\n  var mime = match && db[match[1].toLowerCase()];\n  if (mime && mime.charset) {\n    return mime.charset;\n  }\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8';\n  }\n  return false;\n}\nfunction contentType(str) {\n  if (!str || typeof str !== 'string') {\n    return false;\n  }\n  var mime = str.indexOf('/') === -1 ? exports.lookup(str) : str;\n  if (!mime) {\n    return false;\n  }\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime);\n    if (charset) mime += '; charset=' + charset.toLowerCase();\n  }\n  return mime;\n}\nfunction extension(type) {\n  if (!type || typeof type !== 'string') {\n    return false;\n  }\n  var match = EXTRACT_TYPE_REGEXP.exec(type);\n  var exts = match && exports.extensions[match[1].toLowerCase()];\n  if (!exts || !exts.length) {\n    return false;\n  }\n  return exts[0];\n}\nfunction lookup(path) {\n  if (!path || typeof path !== 'string') {\n    return false;\n  }\n  var extension = extname('x.' + path).toLowerCase().substr(1);\n  if (!extension) {\n    return false;\n  }\n  return exports.types[extension] || false;\n}\nfunction populateMaps(extensions, types) {\n  var preference = ['nginx', 'apache', undefined, 'iana'];\n  Object.keys(db).forEach(function forEachMimeType(type) {\n    var mime = db[type];\n    var exts = mime.extensions;\n    if (!exts || !exts.length) {\n      return;\n    }\n    extensions[type] = exts;\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i];\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source);\n        var to = preference.indexOf(mime.source);\n        if (types[extension] !== 'application/octet-stream' && (from > to || from === to && types[extension].substr(0, 12) === 'application/')) {\n          continue;\n        }\n      }\n      types[extension] = type;\n    }\n  });\n}\n"}