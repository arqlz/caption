{"contents":"class TranscriptionDocument {\n  constructor(roomIdOrDocument, itemes = []) {\n    this.roomId = \"\";\n    this.itemes = [];\n    this.photoUrl = \"\";\n    if (typeof roomIdOrDocument == \"string\") {\n      this.roomId = roomIdOrDocument;\n      this.itemes = itemes;\n    } else {\n      this.roomId = roomIdOrDocument.roomId;\n      this.itemes = roomIdOrDocument.itemes || itemes;\n      this.photoUrl = roomIdOrDocument.photoUrl;\n    }\n  }\n  near(second) {\n    let candidates = this.itemes.filter(f => {\n      return f.id > second * 10000000;\n    });\n    if (candidates.length) return candidates; else if (this.itemes.length) return [this.itemes[this.itemes.length - 1]];\n    return [];\n  }\n  clean() {\n    var times = {};\n    for (let m of this.itemes) {\n      times[m.id] = m;\n    }\n    this.itemes = Object.values(times);\n  }\n  get(id) {\n    return this.itemes.find(f => f.id.toString() == id);\n  }\n  save() {\n    return fetch(`/api/transcripcion/${this.roomId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(this)\n    }).then(r => r.json());\n  }\n}\nexports.TranscriptionDocument = TranscriptionDocument;\n","sourceMap":"{\"version\":3,\"sources\":[\"public/src/utils/document.ts\"],\"names\":[\"constructor\",\"roomIdOrDocument\",\"itemes\",\"roomId\",\"photoUrl\",\"near\",\"second\",\"candidates\",\"filter\",\"f\",\"id\",\"length\",\"clean\",\"times\",\"m\",\"Object\",\"values\",\"get\",\"find\",\"toString\",\"save\",\"fetch\",\"method\",\"headers\",\"body\",\"JSON\",\"stringify\",\"then\",\"r\",\"json\"],\"mappings\":\"AAOO;EAIHA,YAAYC,kBAAkDC;SAH9DC,SAAiB;SACjBD;SACAE,WAAmB;eAEJH,oBAAoB;MAC3B,KAAKE,SAASF;MACd,KAAKC,SAASA;;MAEd,KAAKC,SAASF,iBAAiBE;MAC/B,KAAKD,SAASD,iBAAiBC,UAAUA;MACzC,KAAKE,WAAWH,iBAAiBG;;;EAIzCC,KAAKC;QACGC,aAAa,KAAKL,OAAOM,OAAO,AAAAC;aACzBA,EAAEC,KAAKJ,SAAO;;QAErBC,WAAWI,eAAeJ,qBACrB,KAAKL,OAAOS,gBAAgB,KAAKT,OAAO,KAAKA,OAAOS,SAAO;;;EAGxEC;QACQC;aACKC,KAAK,KAAKZ;MACfW,MAAMC,EAAEJ,MAAMI;;IAElB,KAAKZ,SAASa,OAAOC,OAAOH;;EAEhCI,IAAIP;WACO,KAAKR,OAAOgB,KAAK,AAAAT,KAAKA,EAAEC,GAAGS,cAAcT;;EAEpDU;WACWC,4BAA4B,KAAKlB;MAAWmB,QAAQ;MAAQC;QAAU,gBAAgB;;MAAqBC,MAAMC,KAAKC,UAAU;OAAQC,KAAK,AAAAC,KAAKA,EAAEC\",\"sourcesContent\":[\"export interface IMsg {\\r\\n    result: string,\\r\\n    id: number, \\r\\n    speakerId: string\\r\\n}\\r\\n\\r\\n\\r\\nexport class TranscriptionDocument {\\r\\n    roomId: string = \\\"\\\";\\r\\n    itemes: IMsg[] = [];\\r\\n    photoUrl: string = \\\"\\\";\\r\\n    constructor(roomIdOrDocument: string | TranscriptionDocument, itemes: IMsg[] = []) {\\r\\n        if (typeof roomIdOrDocument == \\\"string\\\") {\\r\\n            this.roomId = roomIdOrDocument;\\r\\n            this.itemes = itemes;\\r\\n        } else {\\r\\n            this.roomId = roomIdOrDocument.roomId;\\r\\n            this.itemes = roomIdOrDocument.itemes || itemes;\\r\\n            this.photoUrl = roomIdOrDocument.photoUrl;\\r\\n        }\\r\\n\\r\\n    }\\r\\n    near(second: number) {\\r\\n        let candidates = this.itemes.filter(f => {\\r\\n            return f.id > second*10000000;\\r\\n        })\\r\\n        if (candidates.length) return candidates;\\r\\n        else if (this.itemes.length) return [this.itemes[this.itemes.length-1]]\\r\\n        return []\\r\\n    }\\r\\n    clean() {\\r\\n        var times = {}\\r\\n        for (let m of this.itemes) {\\r\\n            times[m.id] = m\\r\\n        }\\r\\n        this.itemes = Object.values(times)\\r\\n    }\\r\\n    get(id: string) {\\r\\n        return this.itemes.find(f => f.id.toString() == id)\\r\\n    }\\r\\n    save() {\\r\\n        return fetch(`/api/transcripcion/${this.roomId}`, {method: \\\"POST\\\", headers: {\\\"Content-Type\\\": \\\"application/json\\\"}, body: JSON.stringify(this)}).then(r => r.json())\\r\\n    }\\r\\n}\\r\\n\"]}"}