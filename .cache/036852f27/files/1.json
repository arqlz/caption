{"contents":"exports.__esModule = true;\nvar texteditor_1 = __fusereq(2);\nvar utils_1 = __fusereq(3);\nvar loadDocument_1 = __fusereq(4);\nfunction generarSamplesFromArray(raw, samples = 400) {\n  const blockSize = Math.floor(raw.length / samples);\n  const filtered = [];\n  for (let i = 0; i < samples; i++) {\n    let start = blockSize * i;\n    let sum = 0;\n    for (let j = 0; j < blockSize; j++) {\n      sum += Math.abs(raw[start + j]);\n    }\n    filtered.push(sum / blockSize);\n  }\n  const multiplier = Math.pow(Math.max(...filtered), -1);\n  const normalized = filtered.map(n => {\n    return n * multiplier;\n  });\n  return normalized;\n}\nfunction generarSamples(audioBuffer, samples = 400) {\n  const raw = audioBuffer.getChannelData(0);\n  return generarSamplesFromArray(raw, samples);\n}\nfunction decodeAudio(buffer) {\n  var context = new AudioContext();\n  return context.decodeAudioData(buffer).then(audioBuffer => {\n    return audioBuffer;\n  });\n}\nfunction drawHorizontal(canvas, normalizedData) {\n  const dpr = window.devicePixelRatio || 1;\n  const padding = 10;\n  canvas.width = canvas.offsetWidth * dpr;\n  canvas.height = (canvas.offsetHeight + padding * 2) * dpr;\n  const ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.scale(dpr, dpr);\n  ctx.translate(0, canvas.offsetHeight / 2 + padding);\n  const width = canvas.offsetWidth / normalizedData.length;\n  ctx.fillStyle = \"#e7534b\";\n  for (let i = 0; i < normalizedData.length; i++) {\n    let x = width * i;\n    let h = normalizedData[i] * canvas.offsetHeight - padding;\n    if (h < 3) h = 1;\n    if (i % 2 == 0 && h > 1) h = -h;\n    ctx.fillRect(x, 0, width, h);\n  }\n}\nasync function build() {\n  var [blob, doc] = await loadDocument_1.loadData(sessions);\n  if (!blob) return;\n  var div = utils_1.createDiv({\n    width: 500,\n    margin: \"0 auto\"\n  });\n  const visualization = utils_1.createDiv(\"row\");\n  const canvas = document.createElement(\"canvas\");\n  canvas.classList.add(\"flex\");\n  canvas.style.width = \"100%\";\n  canvas.style.height = \"100px\";\n  visualization.append(canvas);\n  div.append(visualization);\n  const photo = utils_1.createDiv({\n    height: 150,\n    width: \"100%\",\n    background: \"#00000022\",\n    margin: \"30px auto\"\n  });\n  let img = utils_1.createElement(\"img\", {\n    width: \"100%\"\n  });\n  if (doc.photoUrl) img.src = doc.photoUrl;\n  photo.append(img);\n  photo.onclick = () => {\n    let input = utils_1.createElement(\"input\");\n    input.type = \"file\";\n    input.accept = \"image/jpeg\";\n    input.onchange = e => {\n      let image_file = e.target.files[0];\n      var form = new FormData();\n      form.append(\"file\", image_file);\n      fetch(`/api/images/${doc.roomId}`, {\n        method: \"POST\",\n        body: form\n      }).then(r => r.json()).then(res => {\n        doc.photoUrl = res.result;\n        img.src = doc.photoUrl;\n        doc.save().then(console.log, console.error);\n      }, console.error);\n    };\n    input.click();\n  };\n  div.append(photo);\n  const audioControls = utils_1.createDiv(\"row center\", {\n    marginTop: 10\n  });\n  const playPauseButton = utils_1.createElement(\"button\", {\n    width: 100,\n    height: 50\n  });\n  playPauseButton.innerText = \"Play\";\n  audioControls.append(playPauseButton);\n  const downloadAudioButton = utils_1.createElement(\"button\", {\n    width: 140,\n    height: 50,\n    marginLeft: 10\n  });\n  downloadAudioButton.innerText = \"Download\";\n  audioControls.append(downloadAudioButton);\n  div.append(audioControls);\n  document.body.append(div);\n  const audioBuffer = await decodeAudio(await blob.arrayBuffer());\n  const normalized = generarSamples(audioBuffer);\n  drawHorizontal(canvas, normalized);\n  let editor = texteditor_1.generarTextEditor(doc, document.body);\n  var context = new AudioContext();\n  var source;\n  canvas.onmousemove = e => {\n    drawHorizontal(canvas, normalized);\n    var ctx = canvas.getContext(\"2d\");\n    ctx.strokeStyle = \"#e7534b\";\n    ctx.lineWidth = 3;\n    ctx.moveTo(e.offsetX, -canvas.height / 2);\n    ctx.lineTo(e.offsetX, canvas.height / 2);\n    ctx.stroke();\n    let progress = e.offsetX / canvas.width;\n    let segundos = audioBuffer.duration * progress;\n    var after_this = doc.near(segundos);\n    if (after_this.length) {\n      editor.clearMark().mark(after_this[0].id.toString());\n    }\n  };\n  function playAudio(offset) {\n    if (source) source.stop();\n    playPauseButton.innerText = \"Stop\";\n    source = context.createBufferSource();\n    source.buffer = audioBuffer;\n    source.connect(context.destination);\n    source.start(0, offset);\n  }\n  canvas.onclick = e => {\n    let progress = e.offsetX / canvas.width;\n    let segundos = audioBuffer.duration * progress;\n    var target = doc.near(segundos);\n    if (target.length) playAudio(target[0].id / 10000000);\n  };\n  playPauseButton.onclick = () => {\n    if (source) {\n      source.stop();\n      source = null;\n      playPauseButton.innerText = \"Play\";\n    } else playAudio(0);\n  };\n  downloadAudioButton.onclick = () => {\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style.display = \"none\";\n    let url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = doc.roomId + \".webm\";\n    a.click();\n    window.URL.revokeObjectURL(url);\n    document.body.removeChild(a);\n  };\n}\nbuild();\n","sourceMap":"{\"version\":3,\"sources\":[\"public/src/editor.ts\"],\"names\":[\"raw\",\"samples\",\"blockSize\",\"Math\",\"floor\",\"length\",\"filtered\",\"i\",\"start\",\"sum\",\"j\",\"abs\",\"push\",\"multiplier\",\"pow\",\"max\",\"normalized\",\"map\",\"n\",\"audioBuffer\",\"getChannelData\",\"generarSamplesFromArray\",\"buffer\",\"context\",\"AudioContext\",\"decodeAudioData\",\"then\",\"canvas\",\"normalizedData\",\"dpr\",\"window\",\"devicePixelRatio\",\"padding\",\"width\",\"offsetWidth\",\"height\",\"offsetHeight\",\"ctx\",\"getContext\",\"clearRect\",\"scale\",\"translate\",\"fillStyle\",\"x\",\"h\",\"fillRect\",\"blob\",\"doc\",\"loadDocument_1\",\"sessions\",\"div\",\"utils_1\",\"margin\",\"visualization\",\"document\",\"createElement\",\"classList\",\"add\",\"style\",\"append\",\"photo\",\"background\",\"img\",\"photoUrl\",\"src\",\"onclick\",\"input\",\"type\",\"accept\",\"onchange\",\"e\",\"image_file\",\"target\",\"files\",\"form\",\"FormData\",\"fetch\",\"roomId\",\"method\",\"body\",\"r\",\"json\",\"res\",\"result\",\"save\",\"console\",\"log\",\"error\",\"click\",\"audioControls\",\"marginTop\",\"playPauseButton\",\"innerText\",\"downloadAudioButton\",\"marginLeft\",\"decodeAudio\",\"arrayBuffer\",\"generarSamples\",\"drawHorizontal\",\"editor\",\"texteditor_1\",\"source\",\"onmousemove\",\"strokeStyle\",\"lineWidth\",\"moveTo\",\"offsetX\",\"lineTo\",\"stroke\",\"progress\",\"segundos\",\"duration\",\"after_this\",\"near\",\"clearMark\",\"mark\",\"id\",\"toString\",\"offset\",\"stop\",\"createBufferSource\",\"connect\",\"destination\",\"playAudio\",\"a\",\"appendChild\",\"display\",\"url\",\"URL\",\"createObjectURL\",\"href\",\"download\",\"revokeObjectURL\",\"removeChild\",\"build\"],\"mappings\":\"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\",\"sourcesContent\":[\"import { generarTextEditor } from \\\"./components/texteditor\\\";\\r\\nimport { createDiv, createElement } from \\\"./components/utils\\\";\\r\\nimport { loadData } from \\\"./utils/loadDocument\\\";\\r\\ndeclare const sessions;\\r\\n\\r\\nfunction generarSamplesFromArray(raw: Float32Array, samples = 400) {\\r\\n    const blockSize = Math.floor(raw.length/samples);\\r\\n    const filtered = [];\\r\\n    for (let i = 0; i < samples; i++) {\\r\\n        let start = blockSize * i;\\r\\n        let sum = 0;\\r\\n        for (let j = 0; j < blockSize; j++) {\\r\\n            sum += Math.abs(raw[start+j])\\r\\n        }\\r\\n        filtered.push(sum/blockSize)\\r\\n    }\\r\\n    const multiplier = Math.pow(Math.max(...filtered), -1);\\r\\n    const normalized = filtered.map(n => {\\r\\n        return n * multiplier\\r\\n    })\\r\\n    return normalized\\r\\n}\\r\\nfunction generarSamples(audioBuffer: AudioBuffer, samples = 400) {\\r\\n    const raw = audioBuffer.getChannelData(0);\\r\\n    return generarSamplesFromArray(raw, samples)\\r\\n}\\r\\nfunction decodeAudio(buffer) {\\r\\n    var context = new AudioContext();\\r\\n    return context.decodeAudioData(buffer)\\r\\n    .then(audioBuffer => {\\r\\n        return audioBuffer\\r\\n    })\\r\\n}\\r\\n\\r\\nfunction drawHorizontal(canvas: HTMLCanvasElement, normalizedData: number[]) {\\r\\n    const dpr = window.devicePixelRatio || 1;    \\r\\n    const padding = 10;\\r\\n    canvas.width = canvas.offsetWidth * dpr;\\r\\n    canvas.height = (canvas.offsetHeight + padding * 2 ) * dpr;\\r\\n    const ctx = canvas.getContext(\\\"2d\\\");\\r\\n    ctx.clearRect(0,0,canvas.width, canvas.height)\\r\\n    ctx.scale(dpr, dpr);\\r\\n    ctx.translate( 0, canvas.offsetHeight / 2 + padding); \\r\\n\\r\\n\\r\\n    const width = canvas.offsetWidth / normalizedData.length;\\r\\n    ctx.fillStyle = \\\"#e7534b\\\";\\r\\n    for (let i = 0; i < normalizedData.length; i++) {\\r\\n        let x = width * i;\\r\\n        let h = normalizedData[i] * canvas.offsetHeight - padding\\r\\n        if (h<3) h = 1;\\r\\n        if (i%2 == 0 && h > 1) h = -h;\\r\\n\\r\\n        ctx.fillRect(x,0,width,h)\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\nasync function build() { \\r\\n\\r\\n    var [blob, doc] = await loadData(sessions);\\r\\n    if (!blob) return;\\r\\n\\r\\n\\r\\n    var div = createDiv({width: 500, margin: \\\"0 auto\\\"})  \\r\\n    const visualization = createDiv(\\\"row\\\")\\r\\n    const canvas = document.createElement(\\\"canvas\\\");\\r\\n    canvas.classList.add(\\\"flex\\\")\\r\\n    canvas.style.width = \\\"100%\\\";\\r\\n    canvas.style.height = \\\"100px\\\";\\r\\n    visualization.append(canvas);\\r\\n    div.append(visualization)\\r\\n\\r\\n    const photo = createDiv({height: 150, width: \\\"100%\\\", background: \\\"#00000022\\\", margin: \\\"30px auto\\\"})\\r\\n    \\r\\n    let img = createElement(\\\"img\\\", {width: \\\"100%\\\"}) as HTMLImageElement;\\r\\n    if (doc.photoUrl) img.src = doc.photoUrl;\\r\\n    photo.append(img)\\r\\n    \\r\\n    photo.onclick = () => {\\r\\n        let input = createElement(\\\"input\\\") as HTMLInputElement;\\r\\n        input.type = \\\"file\\\";\\r\\n        input.accept = \\\"image/jpeg\\\"\\r\\n        input.onchange = (e: any) => {\\r\\n            let image_file = e.target.files[0];\\r\\n            var form = new FormData();\\r\\n            form.append(\\\"file\\\", image_file);\\r\\n            fetch(`/api/images/${doc.roomId}`, {method: \\\"POST\\\", body: form})\\r\\n            .then(r => r.json()).then(res => {\\r\\n                doc.photoUrl = res.result;\\r\\n                img.src = doc.photoUrl;\\r\\n                doc.save().then(console.log, console.error)\\r\\n               \\r\\n                \\r\\n            }, console.error)\\r\\n        }\\r\\n        input.click()\\r\\n    }\\r\\n    div.append(photo)\\r\\n\\r\\n    const audioControls = createDiv(\\\"row center\\\", {marginTop: 10}); \\r\\n    const playPauseButton = createElement(\\\"button\\\", {width: 100, height: 50});\\r\\n    playPauseButton.innerText = \\\"Play\\\";\\r\\n    audioControls.append(playPauseButton);\\r\\n    const downloadAudioButton = createElement(\\\"button\\\", {width: 140, height: 50, marginLeft: 10});\\r\\n    downloadAudioButton.innerText = \\\"Download\\\";\\r\\n    audioControls.append(downloadAudioButton);\\r\\n\\r\\n\\r\\n    div.append(audioControls)\\r\\n    document.body.append(div);\\r\\n\\r\\n    \\r\\n    const audioBuffer = await decodeAudio(await blob.arrayBuffer());\\r\\n    const normalized = generarSamples(audioBuffer);\\r\\n    drawHorizontal(canvas, normalized)  \\r\\n\\r\\n\\r\\n    let editor = generarTextEditor(doc, document.body);\\r\\n    var context = new AudioContext();\\r\\n    var source: AudioBufferSourceNode\\r\\n\\r\\n    canvas.onmousemove = e => {\\r\\n        drawHorizontal(canvas, normalized)  \\r\\n        var ctx = canvas.getContext(\\\"2d\\\");\\r\\n        ctx.strokeStyle = \\\"#e7534b\\\";\\r\\n        ctx.lineWidth = 3;\\r\\n        ctx.moveTo(e.offsetX, -canvas.height/2)\\r\\n        ctx.lineTo(e.offsetX, canvas.height/2)\\r\\n        ctx.stroke()\\r\\n\\r\\n\\r\\n        let progress = e.offsetX/canvas.width;\\r\\n        let segundos = audioBuffer.duration * progress ;\\r\\n\\r\\n\\r\\n        var after_this = doc.near(segundos)\\r\\n        if (after_this.length) {\\r\\n            editor.clearMark().mark(after_this[0].id.toString())\\r\\n        } \\r\\n    }   \\r\\n\\r\\n    function playAudio(offset: number) {\\r\\n        if (source) source.stop()\\r\\n        playPauseButton.innerText = \\\"Stop\\\"\\r\\n        source = context.createBufferSource()\\r\\n        source.buffer = audioBuffer;\\r\\n        source.connect(context.destination)\\r\\n        source.start(0, offset)\\r\\n    }\\r\\n    canvas.onclick = (e) => {\\r\\n        let progress = e.offsetX/canvas.width;\\r\\n        let segundos = audioBuffer.duration * progress ;\\r\\n        \\r\\n        var target = doc.near(segundos)\\r\\n        if (target.length) playAudio( target[0].id / 10000000)\\r\\n    }\\r\\n    playPauseButton.onclick = () => {\\r\\n        if (source) {\\r\\n            source.stop()\\r\\n            source = null;\\r\\n            playPauseButton.innerText = \\\"Play\\\"\\r\\n        } else playAudio(0)\\r\\n    }\\r\\n    downloadAudioButton.onclick = () => {\\r\\n        var a = document.createElement(\\\"a\\\");\\r\\n        document.body.appendChild(a);\\r\\n        a.style.display = \\\"none\\\";\\r\\n        let url = window.URL.createObjectURL(blob)\\r\\n        a.href = url;\\r\\n        a.download = doc.roomId+\\\".webm\\\";\\r\\n        a.click()\\r\\n        window.URL.revokeObjectURL(url)\\r\\n        document.body.removeChild(a)\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\nbuild()\\r\\n\\r\\n\"]}"}