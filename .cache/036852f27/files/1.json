{"contents":"exports.__esModule = true;\nvar texteditor_1 = __fusereq(2);\nvar utils_1 = __fusereq(3);\nfunction loadFiles() {\n  return fetch(\"/data/KF7NRC.webm\").then(r => r.blob()).then(blob => {\n    return fetch(\"/data/KF7NRC.jsonl\").then(r => r.text()).then(text => {\n      var json = text.split(\"\\n\").filter(f => f.trim().length).map(j => JSON.parse(j));\n      return [blob, json];\n    });\n  }).catch(console.error);\n}\nfunction generarSamplesFromArray(raw, samples = 400) {\n  const blockSize = Math.floor(raw.length / samples);\n  const filtered = [];\n  for (let i = 0; i < samples; i++) {\n    let start = blockSize * i;\n    let sum = 0;\n    for (let j = 0; j < blockSize; j++) {\n      sum += Math.abs(raw[start + j]);\n    }\n    filtered.push(sum / blockSize);\n  }\n  const multiplier = Math.pow(Math.max(...filtered), -1);\n  const normalized = filtered.map(n => {\n    return n * multiplier;\n  });\n  return normalized;\n}\nfunction generarSamples(audioBuffer, samples = 400) {\n  const raw = audioBuffer.getChannelData(0);\n  return generarSamplesFromArray(raw, samples);\n}\nfunction decodeAudio(buffer) {\n  var context = new AudioContext();\n  return context.decodeAudioData(buffer).then(audioBuffer => {\n    return audioBuffer;\n  });\n}\nconst drawLineSegment = (ctx, x, y, width, isEven) => {\n  ctx.fillStyle = \"#e7534b\";\n  if (y < 3) y = 1;\n  y = isEven ? y : -y;\n  ctx.fillRect(x, 0, width, y);\n};\nfunction drawHorizontal(canvas, normalizedData) {\n  const dpr = window.devicePixelRatio || 1;\n  const padding = 10;\n  canvas.width = canvas.offsetWidth * dpr;\n  canvas.height = (canvas.offsetHeight + padding * 2) * dpr;\n  const ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.scale(dpr, dpr);\n  ctx.translate(0, canvas.offsetHeight / 2 + padding);\n  const width = canvas.offsetWidth / normalizedData.length;\n  ctx.fillStyle = \"#e7534b\";\n  for (let i = 0; i < normalizedData.length; i++) {\n    let x = width * i;\n    let h = normalizedData[i] * canvas.offsetHeight - padding;\n    if (h < 3) h = 1;\n    if (i % 2 == 0 && h > 1) h = -h;\n    ctx.fillRect(x, 0, width, h);\n  }\n}\nfunction drawVertical(canvas, normalizedData) {\n  const dpr = window.devicePixelRatio || 1;\n  const padding = 10;\n  canvas.width = canvas.offsetWidth + padding * 2 * dpr;\n  canvas.height = canvas.offsetHeight * dpr;\n  const ctx = canvas.getContext(\"2d\");\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.scale(dpr, dpr);\n  ctx.translate(canvas.offsetWidth / 2 + padding, 0);\n  const width = canvas.offsetHeight / normalizedData.length;\n  ctx.fillStyle = \"#e7534b\";\n  for (let i = 0; i < normalizedData.length; i++) {\n    let y = width * i;\n    let w = normalizedData[i] * canvas.offsetWidth - padding;\n    let x = 0;\n    if (w < 3) w = 1;\n    if (i % 2 == 0) {\n      w = -w;\n    }\n    ctx.fillRect(x, y, w, width);\n  }\n}\nasync function build() {\n  const canvas = document.createElement(\"canvas\");\n  canvas.style.width = \"100%\";\n  canvas.style.height = \"100px\";\n  var div = utils_1.createDiv({\n    width: 500,\n    margin: \"0 auto\"\n  });\n  div.append(canvas);\n  document.body.append(div);\n  var [blob, json] = await loadFiles();\n  if (!blob) return;\n  const audioBuffer = await decodeAudio(await blob.arrayBuffer());\n  const normalized = generarSamples(audioBuffer);\n  drawHorizontal(canvas, normalized);\n  canvas.onmousemove = e => {\n    drawHorizontal(canvas, normalized);\n    var ctx = canvas.getContext(\"2d\");\n    ctx.strokeStyle = \"#e7534b\";\n    ctx.lineWidth = 3;\n    ctx.moveTo(e.offsetX, -canvas.height / 2);\n    ctx.lineTo(e.offsetX, canvas.height / 2);\n    ctx.stroke();\n    let progress = e.offsetX / canvas.width;\n    console.log(progress * audioBuffer.length);\n  };\n  console.log(json);\n  document.body.append(texteditor_1.generarTextEditor(json));\n}\nbuild();\n","sourceMap":"{\"version\":3,\"sources\":[\"public/src/editor.ts\"],\"names\":[\"fetch\",\"then\",\"r\",\"blob\",\"text\",\"json\",\"split\",\"filter\",\"f\",\"trim\",\"length\",\"map\",\"j\",\"JSON\",\"parse\",\"catch\",\"console\",\"error\",\"raw\",\"samples\",\"blockSize\",\"Math\",\"floor\",\"filtered\",\"i\",\"start\",\"sum\",\"abs\",\"push\",\"multiplier\",\"pow\",\"max\",\"normalized\",\"n\",\"audioBuffer\",\"getChannelData\",\"generarSamplesFromArray\",\"buffer\",\"context\",\"AudioContext\",\"decodeAudioData\",\"drawLineSegment\",\"ctx\",\"x\",\"y\",\"width\",\"isEven\",\"fillStyle\",\"fillRect\",\"canvas\",\"normalizedData\",\"dpr\",\"window\",\"devicePixelRatio\",\"padding\",\"offsetWidth\",\"height\",\"offsetHeight\",\"getContext\",\"clearRect\",\"scale\",\"translate\",\"h\",\"w\",\"document\",\"createElement\",\"style\",\"div\",\"utils_1\",\"margin\",\"append\",\"body\",\"loadFiles\",\"decodeAudio\",\"arrayBuffer\",\"generarSamples\",\"drawHorizontal\",\"onmousemove\",\"e\",\"strokeStyle\",\"lineWidth\",\"moveTo\",\"offsetX\",\"lineTo\",\"stroke\",\"progress\",\"log\",\"texteditor_1\",\"build\"],\"mappings\":\"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\",\"sourcesContent\":[\"import { generarTextEditor } from \\\"./components/texteditor\\\";\\r\\nimport { createDiv } from \\\"./components/utils\\\";\\r\\n\\r\\nfunction loadFiles(): Promise<[Blob, any]>{\\r\\n    return fetch(\\\"/data/KF7NRC.webm\\\").then(r => r.blob()).then(blob => {\\r\\n        return fetch(\\\"/data/KF7NRC.jsonl\\\").then(r => r.text()).then(text => {\\r\\n            var json = text.split(\\\"\\\\n\\\").filter(f => f.trim().length).map(j => JSON.parse(j))\\r\\n            return [blob, json] as any\\r\\n        })\\r\\n   \\r\\n    }).catch(console.error)\\r\\n}\\r\\nfunction generarSamplesFromArray(raw: Float32Array, samples = 400) {\\r\\n    const blockSize = Math.floor(raw.length/samples);\\r\\n    const filtered = [];\\r\\n    for (let i = 0; i < samples; i++) {\\r\\n        let start = blockSize * i;\\r\\n        let sum = 0;\\r\\n        for (let j = 0; j < blockSize; j++) {\\r\\n            sum += Math.abs(raw[start+j])\\r\\n        }\\r\\n        filtered.push(sum/blockSize)\\r\\n    }\\r\\n    const multiplier = Math.pow(Math.max(...filtered), -1);\\r\\n    const normalized = filtered.map(n => {\\r\\n        return n * multiplier\\r\\n    })\\r\\n    return normalized\\r\\n}\\r\\nfunction generarSamples(audioBuffer: AudioBuffer, samples = 400) {\\r\\n    const raw = audioBuffer.getChannelData(0);\\r\\n    return generarSamplesFromArray(raw, samples)\\r\\n}\\r\\nfunction decodeAudio(buffer) {\\r\\n    var context = new AudioContext();\\r\\n    return context.decodeAudioData(buffer)\\r\\n    .then(audioBuffer => {\\r\\n        return audioBuffer\\r\\n    })\\r\\n}\\r\\nconst drawLineSegment = (ctx, x, y, width, isEven: number) => {\\r\\n    ctx.fillStyle = \\\"#e7534b\\\";\\r\\n    if (y<3) y = 1;\\r\\n    y = isEven ? y : -y;\\r\\n    ctx.fillRect(x,0,width,y)\\r\\n};\\r\\n\\r\\n\\r\\nfunction drawHorizontal(canvas: HTMLCanvasElement, normalizedData: number[]) {\\r\\n    const dpr = window.devicePixelRatio || 1;    \\r\\n    const padding = 10;\\r\\n    canvas.width = canvas.offsetWidth * dpr;\\r\\n    canvas.height = (canvas.offsetHeight + padding * 2 ) * dpr;\\r\\n    const ctx = canvas.getContext(\\\"2d\\\");\\r\\n    ctx.clearRect(0,0,canvas.width, canvas.height)\\r\\n    ctx.scale(dpr, dpr);\\r\\n    ctx.translate( 0, canvas.offsetHeight / 2 + padding); \\r\\n\\r\\n\\r\\n    const width = canvas.offsetWidth / normalizedData.length;\\r\\n    ctx.fillStyle = \\\"#e7534b\\\";\\r\\n    for (let i = 0; i < normalizedData.length; i++) {\\r\\n        let x = width * i;\\r\\n        let h = normalizedData[i] * canvas.offsetHeight - padding\\r\\n        if (h<3) h = 1;\\r\\n        if (i%2 == 0 && h > 1) h = -h;\\r\\n\\r\\n        ctx.fillRect(x,0,width,h)\\r\\n\\r\\n    }\\r\\n}\\r\\nfunction drawVertical(canvas: HTMLCanvasElement, normalizedData: number[]) {\\r\\n    const dpr = window.devicePixelRatio || 1;    \\r\\n    const padding = 10;\\r\\n    canvas.width = canvas.offsetWidth + padding * 2 * dpr;\\r\\n    canvas.height = (canvas.offsetHeight ) * dpr;\\r\\n    const ctx = canvas.getContext(\\\"2d\\\");\\r\\n    ctx.clearRect(0,0,canvas.width, canvas.height)\\r\\n    ctx.scale(dpr, dpr);\\r\\n    ctx.translate( canvas.offsetWidth / 2 + padding, 0); \\r\\n\\r\\n\\r\\n\\r\\n    const width = canvas.offsetHeight / normalizedData.length;\\r\\n    ctx.fillStyle = \\\"#e7534b\\\";\\r\\n    for (let i = 0; i < normalizedData.length; i++) {\\r\\n        let y = width * i;\\r\\n        let w = normalizedData[i] * canvas.offsetWidth - padding;\\r\\n        let x = 0;\\r\\n\\r\\n        if (w<3) w = 1;\\r\\n        if (i%2 == 0) {\\r\\n            w = -w;\\r\\n      \\r\\n        }\\r\\n\\r\\n        ctx.fillRect(x,y,w, width)\\r\\n\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nasync function build() {\\r\\n    const canvas = document.createElement(\\\"canvas\\\");\\r\\n    canvas.style.width = \\\"100%\\\";\\r\\n    canvas.style.height = \\\"100px\\\";\\r\\n\\r\\n    var div = createDiv({width: 500, margin: \\\"0 auto\\\"})\\r\\n    div.append(canvas)\\r\\n    document.body.append(div);\\r\\n\\r\\n    /*\\r\\n    const canvas2 = document.createElement(\\\"canvas\\\");\\r\\n    canvas2.style.width = \\\"100px\\\";\\r\\n    canvas2.style.height = \\\"100%\\\";\\r\\n    document.body.append(canvas2);\\r\\n    */\\r\\n\\r\\n\\r\\n    var [blob, json] = await loadFiles() ;\\r\\n    if (!blob) return;\\r\\n    \\r\\n    const audioBuffer = await decodeAudio(await blob.arrayBuffer());\\r\\n    const normalized = generarSamples(audioBuffer);\\r\\n    drawHorizontal(canvas, normalized)  \\r\\n    canvas.onmousemove = e => {\\r\\n        drawHorizontal(canvas, normalized)  \\r\\n        var ctx = canvas.getContext(\\\"2d\\\");\\r\\n        ctx.strokeStyle = \\\"#e7534b\\\";\\r\\n        ctx.lineWidth = 3;\\r\\n        ctx.moveTo(e.offsetX, -canvas.height/2)\\r\\n        ctx.lineTo(e.offsetX, canvas.height/2)\\r\\n        ctx.stroke()\\r\\n\\r\\n\\r\\n        let progress = e.offsetX/canvas.width;\\r\\n        console.log(progress*audioBuffer.length)\\r\\n    }\\r\\n    console.log(json)\\r\\n    \\r\\n\\r\\n    document.body.append(generarTextEditor(json))\\r\\n\\r\\n    /*\\r\\n    for (let i = 0; i < audioBuffer.length; i+=(8**3)*2) {\\r\\n        var subset = audioBuffer.getChannelData(0).slice(0, i)\\r\\n        var normalized = generarSamplesFromArray(subset);\\r\\n        drawHorizontal(canvas, normalized)   \\r\\n        drawVertical(canvas2, normalized)   \\r\\n        await wait();\\r\\n    }\\r\\n    return\\r\\n    var normalized = generarSamples(audioBuffer);\\r\\n    normalized = normalized.concat(normalized)\\r\\n    normalized = normalized.concat(normalized)\\r\\n\\r\\n    function wait(time = 10) {\\r\\n        return new Promise((resolve) => setTimeout(resolve, time))\\r\\n    }\\r\\n    for (var i = 0; i < normalized.length; i++) {\\r\\n        var sub = normalized.slice(0, i)\\r\\n        \\r\\n        drawHorizontal(canvas, sub)   \\r\\n        drawVertical(canvas2, sub)   \\r\\n        await wait();\\r\\n    }*/\\r\\n \\r\\n}\\r\\n\\r\\n\\r\\nbuild()\"]}"}