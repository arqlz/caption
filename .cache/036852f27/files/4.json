{"contents":"exports.__esModule = true;\nvar document_1 = __fusereq(5);\nfunction loadData(room_id) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const blob = await fetch(`/audio/${room_id}`).then(r => r.blob()).catch(err => null);\n      if (blob) console.log(blob.size, room_id);\n      if (!blob || blob.size < 1000) return;\n      fetch(`/api/transcripcion/${room_id}`).then(r => r.json()).then(jdoc => {\n        var doc = new document_1.TranscriptionDocument(jdoc.result);\n        resolve([blob, doc]);\n      }).catch(err => {\n        return fetch(`/transcripcion/${room_id}`).then(r => r.text()).then(text => {\n          var json = text.split(\"\\n\").filter(f => f.trim().length).map(j => JSON.parse(j));\n          var doc = new document_1.TranscriptionDocument(room_id, json);\n          doc.clean();\n          resolve([blob, doc]);\n        }).catch(err => {\n          throw new Error(\"El archivo jsonl no fue encontrado: \" + err);\n        });\n      });\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\nexports.loadData = loadData;\n","sourceMap":"{\"version\":3,\"sources\":[\"public/src/utils/loadDocument.ts\"],\"names\":[\"room_id\",\"Promise\",\"resolve\",\"reject\",\"blob\",\"fetch\",\"then\",\"r\",\"catch\",\"err\",\"console\",\"log\",\"size\",\"json\",\"jdoc\",\"doc\",\"document_1\",\"result\",\"text\",\"split\",\"filter\",\"f\",\"trim\",\"length\",\"map\",\"j\",\"JSON\",\"parse\",\"clean\",\"Error\"],\"mappings\":\";;AAEO,kBAAkBA;aACVC,QAAuC,OAAOC,SAASC;;YAEpDC,aAAaC,gBAAgBL,WAAWM,KAAK,AAAAC,KAAKA,EAAEH,QAAQI,MAAM,AAAAC,OAAO;UAC3EL,MAAMM,QAAQC,IAAIP,KAAKQ,MAAMZ;WAC5BI,QAAQA,KAAKQ,OAAO;MAEzBP,4BAA4BL,WAAWM,KAAK,AAAAC,KAAKA,EAAEM,QAAQP,KAAM,AAACQ;YAC1DC,UAAUC,iCAAsBF,KAAKG;QACzCf,SAAUE,MAAMW;SACjBP,MAAM,AAAAC;eAEEJ,wBAAwBL,WAAWM,KAAK,AAAAC,KAAKA,EAAEW,QAAQZ,KAAK,AAAAY;cAC3DL,OAAOK,KAAKC,MAAM,MAAMC,OAAO,AAAAC,KAAKA,EAAEC,OAAOC,QAAQC,IAAI,AAAAC,KAAKC,KAAKC,MAAMF;cACzEV,UAAUC,iCAAsBhB,SAASa;UAC7CE,IAAIa;UACJ1B,SAAUE,MAAMW;WACjBP,MAAM,AAAAC;oBACKoB,MAAM,yCAAuCpB;;;aAI3DA;MACJN,OAAOM\",\"sourcesContent\":[\"import { TranscriptionDocument } from \\\"./document\\\"\\r\\n\\r\\nexport function loadData(room_id: string): Promise<[Blob, TranscriptionDocument]>{\\r\\n    return new Promise<[Blob, TranscriptionDocument]>(async (resolve, reject) => {\\r\\n        try {\\r\\n            const blob = await fetch(`/audio/${room_id}`).then(r => r.blob()).catch(err => null)\\r\\n            if (blob) console.log(blob.size, room_id)\\r\\n            if (!blob || blob.size < 1000) return;\\r\\n\\r\\n            fetch(`/api/transcripcion/${room_id}`).then(r => r.json()).then( (jdoc: {result: TranscriptionDocument}) => {\\r\\n                var doc = new TranscriptionDocument(jdoc.result)\\r\\n                resolve( [blob, doc] )\\r\\n            }).catch(err => {\\r\\n\\r\\n                return fetch(`/transcripcion/${room_id}`).then(r => r.text()).then(text => {\\r\\n                    var json = text.split(\\\"\\\\n\\\").filter(f => f.trim().length).map(j => JSON.parse(j))\\r\\n                    var doc = new TranscriptionDocument(room_id, json)\\r\\n                    doc.clean()\\r\\n                    resolve( [blob, doc] )\\r\\n                }).catch(err => {\\r\\n                    throw new Error(\\\"El archivo jsonl no fue encontrado: \\\"+err)\\r\\n                })\\r\\n            })            \\r\\n\\r\\n        } catch(err) {\\r\\n            reject(err)\\r\\n        }\\r\\n    })\\r\\n}\"]}"}